[{"db_id": "card_games", "question": "Which are the cards that have incredibly powerful foils.", "evidence": "poweful foils refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null", "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL", "question_toks": ["Which", "are", "the", "cards", "that", "have", "incredibly", "powerful", "foils", "."], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "cardKingdomId", "IS", "NOT", "NULL"], "evidence_toks": ["poweful", "foils", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the borderless cards available without powerful foils?", "evidence": "borderless' refers to borderColor; without powerful foils refers to cardKingdomId is NOT NULL and cardKingdomFoildId is NULL", "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NULL AND cardKingdomId IS NULL", "question_toks": ["What", "are", "the", "borderless", "cards", "available", "without", "powerful", "foils", "?"], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "borderColor", "=", "'borderless", "'", "AND", "cardKingdomId", "IS", "NULL", "AND", "cardKingdomId", "IS", "NULL"], "evidence_toks": ["borderless", "'", "refers", "to", "borderColor", ";", "without", "powerful", "foils", "refers", "to", "cardKingdomId", "is", "NOT", "NULL", "and", "cardKingdomFoildId", "is", "NULL"], "difficulty": "simple"}, {"db_id": "card_games", "question": "List all the mythic rarity print cards banned in gladiator format.", "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';", "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'", "question_toks": ["List", "all", "the", "mythic", "rarity", "print", "cards", "banned", "in", "gladiator", "format", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.format", "=", "'gladiator", "'", "AND", "T2.status", "=", "'Banned", "'", "AND", "T1.rarity", "=", "'mythic", "'"], "evidence_toks": ["mythic", "rarity", "printing", "refers", "to", "rarity", "=", "'mythic", "'", ";", "card", "banned", "refers", "to", "status", "=", "'Banned", "'", ";", "in", "gladiator", "format", "refers", "to", "format", "=", "'gladiator", "'", ";"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format.", "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';", "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL", "question_toks": ["For", "artifact", "type", "of", "cards", "that", "do", "not", "have", "multiple", "faces", "on", "the", "same", "card", ",", "state", "its", "legalities", "for", "vintage", "play", "format", "."], "SQL_toks": ["SELECT", "DISTINCT", "T2.status", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.type", "=", "'Artifact", "'", "AND", "T2.format", "=", "'vintage", "'", "AND", "T1.side", "IS", "NULL"], "evidence_toks": ["Artifact", "type", "of", "cards", "refers", "to", "types", "=", "'Artifact", "'", ";", "card", "does", "not", "have", "multiple", "faces", "on", "the", "same", "card", "refers", "to", "side", "is", "NULL", "'", ";", "vintage", "play", "format", "refers", "to", "format", "=", "'vintage", "'", ";"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "List all the card id and artist with unknown power which are legal for commander play format.", "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'", "SQL": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND T1.power IS NULL OR T1.power = '*'", "question_toks": ["List", "all", "the", "card", "id", "and", "artist", "with", "unknown", "power", "which", "are", "legal", "for", "commander", "play", "format", "."], "SQL_toks": ["SELECT", "T1.id", ",", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Legal", "'", "AND", "T2.format", "=", "'commander", "'", "AND", "T1.power", "IS", "NULL", "OR", "T1.power", "=", "'*", "'"], "evidence_toks": ["unknown", "power", "refers", "to", "power", "=", "'*", "'", "or", "POWER", "IS", "NULL", ";", "commander", "play", "format", "refers", "to", "format", "=", "'commander", "'", ";", "legal", "for", "commander", "play", "format", "refers", "to", "format", "=", "'commander", "'", "where", "status", "=", "'Legal", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "State the alternative languages available for card named Annul numbered 29.", "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';", "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29", "question_toks": ["State", "the", "alternative", "languages", "available", "for", "card", "named", "Annul", "numbered", "29", "."], "SQL_toks": ["SELECT", "T2.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Annul", "'", "AND", "T1.number", "=", "29"], "evidence_toks": ["annul", "refers", "to", "name", "=", "'annul", "'", ";", "numbered", "29", "refers", "to", "number", "=", "'29", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "List all the sets available in Italian translation. State the total number of cards per set.", "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;", "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'", "question_toks": ["List", "all", "the", "sets", "available", "in", "Italian", "translation", ".", "State", "the", "total", "number", "of", "cards", "per", "set", "."], "SQL_toks": ["SELECT", "T1.name", ",", "T1.totalSetSize", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.language", "=", "'Italian", "'"], "evidence_toks": ["Italian", "translation", "refers", "to", "language", "=", "'Italian", "'", ";", "total", "number", "of", "card", "per", "set", "refers", "to", "totalSetSize", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "evidence": "Aaron Boyd' is artist;", "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'", "question_toks": ["How", "many", "types", "of", "cards", "does", "the", "artist", "Aaron", "Boyd", "illustrated", "about", "card", "art", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "type", ")", "FROM", "cards", "WHERE", "artist", "=", "'Aaron", "Boyd", "'"], "evidence_toks": ["Aaron", "Boyd", "'", "is", "artist", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many cards have infinite power?", "evidence": "infinite power refers to power = '*';", "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'", "question_toks": ["How", "many", "cards", "have", "infinite", "power", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "cards", "WHERE", "power", "=", "'*", "'"], "evidence_toks": ["infinite", "power", "refers", "to", "power", "=", "'*", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;", "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL", "question_toks": ["What", "is", "the", "type", "of", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "as", "originally", "printed", "?"], "SQL_toks": ["SELECT", "originalType", "FROM", "cards", "WHERE", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", "AND", "originalType", "IS", "NOT", "NULL"], "evidence_toks": ["Ancestor", "'s", "Chosen", "'", "is", "the", "name", "of", "card", ";", "type", "of", "the", "card", "as", "originally", "printed", "refers", "to", "originaltype", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the description about the ruling of card \"Condemn\"?", "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;", "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'", "question_toks": ["What", "is", "the", "description", "about", "the", "ruling", "of", "card", "``", "Condemn", "''", "?"], "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Condemn", "'"], "evidence_toks": ["Ancestor", "'s", "Chosen", "'", "is", "the", "name", "of", "card", ";", "description", "about", "the", "ruling", "refers", "to", "text", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many cards of legalities whose status is restricted are found in a starter deck?", "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;", "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1", "question_toks": ["How", "many", "cards", "of", "legalities", "whose", "status", "is", "restricted", "are", "found", "in", "a", "starter", "deck", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Restricted", "'", "AND", "T1.isStarter", "=", "1"], "evidence_toks": ["restricted", "refers", "to", "status", "=", "'restricted", "'", ";", "found", "in", "the", "starter", "deck", "refers", "to", "isStarter", "=", "1", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the percentage of borderless cards\uff1f", "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100", "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards", "question_toks": ["What", "is", "the", "percentage", "of", "borderless", "cards\uff1f"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "borderColor", "=", "'borderless", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "id", ")", "FROM", "cards"], "evidence_toks": ["borderless", "card", "refers", "to", "borderColor", "=", "'borderless", "'", ";", "percentage", "=", "Divide", "(", "Count", "(", "id", ")", "where", "borderColor", "=", "'borderless", "'", ",", "Count", "(", "id", ")", ")", "*100"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?", "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100", "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1", "question_toks": ["What", "is", "the", "percentage", "of", "cards", "whose", "language", "is", "French", "among", "the", "Story", "Spotlight", "cards", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T2.language", "=", "'French", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.isStorySpotlight", "=", "1"], "evidence_toks": ["Story", "Spotlight", "card", "refers", "to", "isStorySpotlight", "=", "1", ";", "French", "is", "the", "language", ";", "Percentage", "=", "Divide", "(", "Count", "(", "id", ")", "where", "language", "=", "'French", "'", "and", "isStorySpotlight", "=", "1", ",", "Count", "(", "id", ")", "where", "isStorySpotlight", "=", "1", ")", "*100"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "Name the cards that were illustrated by Aaron Boyd.", "evidence": "Aaron Boyd' is artist;", "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'", "question_toks": ["Name", "the", "cards", "that", "were", "illustrated", "by", "Aaron", "Boyd", "."], "SQL_toks": ["SELECT", "DISTINCT", "name", "FROM", "cards", "WHERE", "artist", "=", "'Aaron", "Boyd", "'"], "evidence_toks": ["Aaron", "Boyd", "'", "is", "artist", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the card layout of cards with keyword of flying?", "evidence": "This doesn't have CE;", "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'", "question_toks": ["What", "are", "the", "card", "layout", "of", "cards", "with", "keyword", "of", "flying", "?"], "SQL_toks": ["SELECT", "layout", "FROM", "cards", "WHERE", "keywords", "=", "'Flying", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "evidence": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;", "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "question_toks": ["What", "are", "the", "foiled", "cards", "that", "are", "incredibly", "powerful", "when", "paired", "with", "non", "foiled", "cards", "?", "List", "the", "IDs", "."], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "cardKingdomId", "IS", "NOT", "NULL", "AND", "cardKingdomFoilId", "IS", "NOT", "NULL"], "evidence_toks": ["Incredibly", "powerful", "refers", "to", "both", "cardKingdomFoilId", "and", "cardKingdomId", "IS", "NOT", "Null", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the cards belong to duel deck a? List the ID.", "evidence": "duel deck a refers to duelDeck = a;", "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'", "question_toks": ["What", "are", "the", "cards", "belong", "to", "duel", "deck", "a", "?", "List", "the", "ID", "."], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "duelDeck", "=", "'", "a", "'"], "evidence_toks": ["duel", "deck", "a", "refers", "to", "duelDeck", "=", "a", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "List the edhrecRank for cards with frame version 2015.", "evidence": "This doesn't have CE;", "SQL": "SELECT name FROM cards WHERE frameVersion = 2015", "question_toks": ["List", "the", "edhrecRank", "for", "cards", "with", "frame", "version", "2015", "."], "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "frameVersion", "=", "2015"], "evidence_toks": ["This", "does", "n't", "have", "CE", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "List down the name of artists for cards in Chinese Simplified.", "evidence": "Chinese Simplified' is the language;", "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'", "question_toks": ["List", "down", "the", "name", "of", "artists", "for", "cards", "in", "Chinese", "Simplified", "."], "SQL_toks": ["SELECT", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'Chinese", "Simplified", "'"], "evidence_toks": ["Chinese", "Simplified", "'", "is", "the", "language", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many of the banned cards are white border?", "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';", "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'", "question_toks": ["How", "many", "of", "the", "banned", "cards", "are", "white", "border", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Banned", "'", "AND", "T1.borderColor", "=", "'white", "'"], "evidence_toks": ["banned", "card", "refers", "to", "status", "=", "'Banned", "'", ";", "white", "border", "refers", "to", "borderColor", "=", "'white", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "List down the uuid for legacy cards and the foreign language of these cards.", "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data", "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'", "question_toks": ["List", "down", "the", "uuid", "for", "legacy", "cards", "and", "the", "foreign", "language", "of", "these", "cards", "."], "SQL_toks": ["SELECT", "T1.uuid", ",", "T3.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "INNER", "JOIN", "foreign_data", "AS", "T3", "ON", "T1.uuid", "=", "T3.uuid", "WHERE", "T2.format", "=", "'legacy", "'"], "evidence_toks": ["legacy", "card", "refers", "to", "format", "=", "'legacy", "'", ";", "foreign", "language", "refers", "to", "language", "in", "foreign_data"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Write down the ruling of Beacon of Immortality.", "evidence": "Beacon of Immortality' is the name of card;", "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'", "question_toks": ["Write", "down", "the", "ruling", "of", "Beacon", "of", "Immortality", "."], "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Beacon", "of", "Immortality", "'"], "evidence_toks": ["Beacon", "of", "Immortality", "'", "is", "the", "name", "of", "card", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many cards are having future frame version and what are the legality status of these cards?", "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';", "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'", "question_toks": ["How", "many", "cards", "are", "having", "future", "frame", "version", "and", "what", "are", "the", "legality", "status", "of", "these", "cards", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.frameVersion", "=", "'future", "'"], "evidence_toks": ["future", "frame", "version", "refers", "to", "frameVersion", "=", "'future", "'", ";", "legility", "status", "refers", "to", "status", "=", "'legal", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the cards for set OGW? State the colour for these cards.", "evidence": "set OGW refers to setCode = 'OGW';", "SQL": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )", "question_toks": ["What", "are", "the", "cards", "for", "set", "OGW", "?", "State", "the", "colour", "for", "these", "cards", "."], "SQL_toks": ["SELECT", "id", ",", "colors", "FROM", "cards", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "set_translations", "WHERE", "setCode", "=", "'OGW", "'", ")"], "evidence_toks": ["set", "OGW", "refers", "to", "setCode", "=", "'OGW", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many white bordered cards are powerful?", "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null (replace)\n\n", "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "question_toks": ["How", "many", "white", "bordered", "cards", "are", "powerful", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "borderColor", "=", "'white", "'", "AND", "cardKingdomId", "IS", "NOT", "NULL", "AND", "cardKingdomFoilId", "IS", "NOT", "NULL"], "evidence_toks": ["white", "bordered", "cards", "refer", "to", "borderColor", "=", "'white", "'", ";", "powerful", "cards", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null", "(", "replace", ")"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?", "evidence": "available in paper refers to availability = 'paper'; available in mtgo refers to availability = 'mtgo; frameVersion = 2003;borderColor = 'black'\n", "SQL": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'", "question_toks": ["What", "is", "the", "mana", "cost", "of", "cards", "with", "a", "normal", "layout", ",", "a", "2003", "frame", "version", ",", "with", "a", "black", "border", "color", ",", "and", "available", "in", "paper", "and", "mtgo", "?"], "SQL_toks": ["SELECT", "manaCost", "FROM", "cards", "WHERE", "availability", "=", "'mtgo", ",", "paper", "'", "AND", "borderColor", "=", "'black", "'", "AND", "frameVersion", "=", "2003", "AND", "layout", "=", "'normal", "'"], "evidence_toks": ["available", "in", "paper", "refers", "to", "availability", "=", "'paper", "'", ";", "available", "in", "mtgo", "refers", "to", "availability", "=", "'mtgo", ";", "frameVersion", "=", "2003", ";", "borderColor", "=", "'black", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Lists all types of cards available in arena.", "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'", "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL", "question_toks": ["Lists", "all", "types", "of", "cards", "available", "in", "arena", "."], "SQL_toks": ["SELECT", "DISTINCT", "subtypes", ",", "supertypes", "FROM", "cards", "WHERE", "availability", "=", "'arena", "'", "AND", "subtypes", "IS", "NOT", "NULL", "AND", "supertypes", "IS", "NOT", "NULL"], "evidence_toks": ["all", "types", "refer", "to", "subtypes", "and", "supertypes", "availble", "in", "arena", "refers", "to", "availability", "=", "'arena", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "evidence": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n", "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309", "question_toks": ["Indicates", "the", "name", "of", "all", "the", "languages", "into", "which", "the", "set", "whose", "number", "of", "cards", "is", "309", "is", "translated", "."], "SQL_toks": ["SELECT", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.baseSetSize", "=", "309"], "evidence_toks": ["set", "refer", "to", "setCode", ";", "number", "of", "cards", "refers", "to", "baseSetSize", ";", "baseSetsize", "=", "309"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Lists by ID all Creature-type cards with legal status.", "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Goblin';", "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'", "question_toks": ["Lists", "by", "ID", "all", "Creature-type", "cards", "with", "legal", "status", "."], "SQL_toks": ["SELECT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "INNER", "JOIN", "legalities", "AS", "T3", "ON", "T1.uuid", "=", "T3.uuid", "WHERE", "T3.status", "=", "'Legal", "'", "AND", "T1.types", "=", "'Creature", "'"], "evidence_toks": ["legal", "status", "refer", "to", "status", "=", "'legal", "'", ";", "Goblin-type", "cards", "refer", "to", "types", "=", "'Goblin", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Lists all types of cards in German.", "evidence": "German refer to language; all types refer to the union of subtypes and supertypes where subtypes is not null AND supertypes is not null", "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL", "question_toks": ["Lists", "all", "types", "of", "cards", "in", "German", "."], "SQL_toks": ["SELECT", "T1.subtypes", ",", "T1.supertypes", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'German", "'", "AND", "T1.subtypes", "IS", "NOT", "NULL", "AND", "T1.supertypes", "IS", "NOT", "NULL"], "evidence_toks": ["German", "refer", "to", "language", ";", "all", "types", "refer", "to", "the", "union", "of", "subtypes", "and", "supertypes", "where", "subtypes", "is", "not", "null", "AND", "supertypes", "is", "not", "null"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "evidence": "available in paper refers to availability = 'paper'", "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'", "question_toks": ["Is", "there", "any", "card", "from", "Erica", "Yang", "artist", "in", "pauper", "format", "and", "available", "in", "paper", "?", "If", "so", ",", "indicate", "its", "ID", "."], "SQL_toks": ["SELECT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.artist", "=", "'Erica", "Yang", "'", "AND", "T2.format", "=", "'pauper", "'", "AND", "T1.availability", "=", "'paper", "'"], "evidence_toks": ["available", "in", "paper", "refers", "to", "availability", "=", "'paper", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many cards with print rarity have ruling text printed on 10/01/2009?", "evidence": "with print rarity refers to rarity = 'rare'; on 10/01/2009 refers to date = '2009-01-10'", "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'", "question_toks": ["How", "many", "cards", "with", "print", "rarity", "have", "ruling", "text", "printed", "on", "10/01/2009", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.rarity", "=", "'rare", "'", "AND", "T2.date", "=", "'2009-01-10", "'"], "evidence_toks": ["with", "print", "rarity", "refers", "to", "rarity", "=", "'rare", "'", ";", "on", "10/01/2009", "refers", "to", "date", "=", "'2009-01-10", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "evidence": "set of 180 cards refers to baseSetSize = 180", "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180", "question_toks": ["What", "language", "is", "the", "set", "of", "180", "cards", "that", "belongs", "to", "the", "Ravnica", "block", "translated", "into", "?"], "SQL_toks": ["SELECT", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.block", "=", "'Ravnica", "'", "AND", "T1.baseSetSize", "=", "180"], "evidence_toks": ["set", "of", "180", "cards", "refers", "to", "baseSetSize", "=", "180"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What percentage of cards with format commander and legal status do not have a content warning?", "evidence": "do not have a content warning refers to hasContentWarning = 0; \npercentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where \nformat = 'commander' AND Status = 'legal';\n", "SQL": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'", "question_toks": ["What", "percentage", "of", "cards", "with", "format", "commander", "and", "legal", "status", "do", "not", "have", "a", "content", "warning", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T1.hasContentWarning", "=", "0", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.format", "=", "'commander", "'", "AND", "T2.status", "=", "'Legal", "'"], "evidence_toks": ["do", "not", "have", "a", "content", "warning", "refers", "to", "hasContentWarning", "=", "0", ";", "percentage", "refers", "to", "DIVIDE", "(", "COUNT", "(", "hasContentWarning", "=", "0", ")", ",", "COUNT", "(", "ID", ")", ")", "*100", "where", "format", "=", "'commander", "'", "AND", "Status", "=", "'legal", "'", ";"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "evidence": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000", "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'", "question_toks": ["How", "many", "color", "cards", "with", "no", "borders", "have", "been", "ranked", "higher", "than", "12000", "on", "EDHRec", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "edhrecRank", ">", "12000", "AND", "borderColor", "=", "'borderless", "'"], "evidence_toks": ["color", "cards", "with", "no", "borders", "refers", "to", "borderColor", "=", "'borderless", "'", ";", "ranked", "higher", "than", "12000", "on", "EDHRec", "refers", "to", "edhrecRank", ">", "12000"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Please provide the numbers of any three powerful pairs of Kingdom Foil and Kingdom Cards.", "evidence": "poweful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null", "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL LIMIT 3", "question_toks": ["Please", "provide", "the", "numbers", "of", "any", "three", "powerful", "pairs", "of", "Kingdom", "Foil", "and", "Kingdom", "Cards", "."], "SQL_toks": ["SELECT", "cardKingdomFoilId", ",", "cardKingdomId", "FROM", "cards", "WHERE", "cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "cardKingdomId", "IS", "NOT", "NULL", "LIMIT", "3"], "evidence_toks": ["poweful", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What proportion of cards do not have a text box with a normal layout?", "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100", "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards", "question_toks": ["What", "proportion", "of", "cards", "do", "not", "have", "a", "text", "box", "with", "a", "normal", "layout", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "isTextless", "=", "1", "AND", "layout", "=", "'normal", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "*", ")", "FROM", "cards"], "evidence_toks": ["do", "not", "have", "a", "text", "box", "refers", "to", "isTextless", "=", "1", ";", "proportion", "refers", "to", "DIVIDE", "(", "COUNT", "(", "Textless", "=", "1", "and", "layout", "=", "'normal", "'", ")", ",", "COUNT", "(", "Textless", ")", ")", "*100"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "evidence": "don't have multiple faces on a single card side is null", "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL", "question_toks": ["What", "are", "the", "card", "numbers", "that", "do", "n't", "have", "multiple", "faces", "on", "a", "single", "card", "and", "have", "the", "subtypes", "Angel", "and", "Wizard", "?"], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "subtypes", "=", "'Angel", ",", "Wizard", "'", "AND", "side", "IS", "NULL"], "evidence_toks": ["do", "n't", "have", "multiple", "faces", "on", "a", "single", "card", "side", "is", "null"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?", "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'", "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'", "question_toks": ["What", "languages", "are", "available", "in", "the", "set", "known", "as", "Archenemy", "on", "the", "magic", "card", "market", "and", "having", "the", "code", "ARC", "?"], "SQL_toks": ["SELECT", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.mcmName", "=", "'Archenemy", "'", "AND", "T2.setCode", "=", "'ARC", "'"], "evidence_toks": ["known", "as", "Archenemy", "refers", "to", "mcmName", "=", "'Archenemy", "'", ";", "having", "the", "code", "ARC", "refers", "to", "setCode", "=", "'ARC", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "What is the name of set number 5 and its translation?", "evidence": "set number 5 refers to id = 5", "SQL": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation", "question_toks": ["What", "is", "the", "name", "of", "set", "number", "5", "and", "its", "translation", "?"], "SQL_toks": ["SELECT", "T1.name", ",", "T2.translation", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.id", "=", "5", "GROUP", "BY", "T1.name", ",", "T2.translation"], "evidence_toks": ["set", "number", "5", "refers", "to", "id", "=", "5"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Which Russian set of cards contains the most cards overall?", "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)", "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY COUNT(T1.id) DESC LIMIT 1", "question_toks": ["Which", "Russian", "set", "of", "cards", "contains", "the", "most", "cards", "overall", "?"], "SQL_toks": ["SELECT", "T1.baseSetSize", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.language", "=", "'Russian", "'", "GROUP", "BY", "T1.baseSetSize", "ORDER", "BY", "COUNT", "(", "T1.id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["Russian", "refers", "to", "language", "=", "'Russian", "'", ";", "contains", "the", "most", "cards", "overall", "refers", "to", "MAX", "(", "baseSetSize", ")"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?", "evidence": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100", "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode", "question_toks": ["What", "is", "the", "percentage", "of", "the", "set", "of", "cards", "that", "have", "Chinese", "Simplified", "as", "the", "language", "and", "are", "only", "available", "for", "online", "games", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T2.language", "=", "'Chinese", "Simplified", "'", "AND", "T1.isOnlineOnly", "=", "1", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "*", ")", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode"], "evidence_toks": ["are", "only", "available", "for", "online", "games", "refers", "to", "isOnlineOnly", "=", "1", ";", "percentage", "=", "DIVIDE", "(", "COUNT", "(", "isOnlineOnly", "=", "1", ")", ",", "COUNT", "(", "isOnlineOnly", ")", ")", "*100"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "How many card border with black color ? List out the card id.", "evidence": "border with black color refers to borderColor = 'black'", "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id", "question_toks": ["How", "many", "card", "border", "with", "black", "color", "?", "List", "out", "the", "card", "id", "."], "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "borderColor", "=", "'black", "'", "GROUP", "BY", "id"], "evidence_toks": ["border", "with", "black", "color", "refers", "to", "borderColor", "=", "'black", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Point out the language of set id \"174\"?", "evidence": "This doesn't have CE", "SQL": "SELECT language FROM set_translations WHERE id = 174", "question_toks": ["Point", "out", "the", "language", "of", "set", "id", "``", "174", "''", "?"], "SQL_toks": ["SELECT", "language", "FROM", "set_translations", "WHERE", "id", "=", "174"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Which foreign language used by \"A Pedra Fellwar\"?", "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'", "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'", "question_toks": ["Which", "foreign", "language", "used", "by", "``", "A", "Pedra", "Fellwar", "''", "?"], "SQL_toks": ["SELECT", "DISTINCT", "language", "FROM", "foreign_data", "WHERE", "name", "=", "'", "A", "Pedra", "Fellwar", "'"], "evidence_toks": ["``", "A", "Pedra", "Fellwar", "''", "refers", "to", "name", "=", "'", "A", "Pedra", "Fellwar", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "State the set code of the set with release date of 07/13/2007?", "evidence": "This doesn't have CE", "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'", "question_toks": ["State", "the", "set", "code", "of", "the", "set", "with", "release", "date", "of", "07/13/2007", "?"], "SQL_toks": ["SELECT", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.releaseDate", "=", "'2007-07-13", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "evidence": "This doesn't have CE", "SQL": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')", "question_toks": ["Mention", "the", "base", "set", "size", "and", "set", "code", "of", "the", "set", "that", "was", "in", "block", "named", "``", "Masques", "''", "and", "``", "Mirage", "''", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.baseSetSize", ",", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.block", "IN", "(", "'Masques", "'", ",", "'Mirage", "'", ")"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "evidence": "This doesn't have CE", "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'", "question_toks": ["Name", "the", "foreign", "name", "of", "the", "card", "that", "has", "boros", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'boros", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "evidence": "This doesn't have CE", "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'", "question_toks": ["What", "is", "the", "language", "and", "flavor", "text", "of", "the", "card", "that", "has", "colorpie", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "SQL_toks": ["SELECT", "DISTINCT", "T2.language", ",", "T2.flavorText", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'colorpie", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?", "evidence": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100", "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'", "question_toks": ["What", "is", "percentage", "of", "the", "cards", "with", "a", "converted", "Mana", "Cost", "of", "10", "in", "set", "of", "Abyssal", "Horror", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T1.convertedManaCost", "=", "10", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.id", ")", ",", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Abyssal", "Horror", "'"], "evidence_toks": ["set", "of", "Abyssal", "Horror", "refers", "to", "name", "=", "'Abyssal", "Horror", "'", ";", "percentage", "refers", "to", "DIVIDE", "(", "COUNT", "(", "convertedManaCost", "=", "16", ")", ",", "COUNT", "(", "convertedManaCost", ")", ")", "*100"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "evidence": "This doesn't have CE", "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'", "question_toks": ["Name", "the", "foreign", "name", "of", "the", "card", "that", "has", "abzan", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'abzan", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the language of the card that has azorius watermark? List out the type of this card.", "evidence": "This doesn't have CE", "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'", "question_toks": ["What", "is", "the", "language", "of", "the", "card", "that", "has", "azorius", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "SQL_toks": ["SELECT", "DISTINCT", "T2.language", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'azorius", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Please list the names of the cards that have a text box.", "evidence": "have a text box refers to isTextless = 0", "SQL": "SELECT DISTINCT name FROM cards WHERE isTextless = 0", "question_toks": ["Please", "list", "the", "names", "of", "the", "cards", "that", "have", "a", "text", "box", "."], "SQL_toks": ["SELECT", "DISTINCT", "name", "FROM", "cards", "WHERE", "isTextless", "=", "0"], "evidence_toks": ["have", "a", "text", "box", "refers", "to", "isTextless", "=", "0"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes", "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'", "question_toks": ["What", "'s", "the", "list", "of", "all", "types", "for", "the", "card", "``", "Molimo", ",", "Maro-Sorcerer", "''", "?"], "SQL_toks": ["SELECT", "DISTINCT", "subtypes", ",", "supertypes", "FROM", "cards", "WHERE", "name", "=", "'Molimo", ",", "Maro-Sorcerer", "'"], "evidence_toks": ["card", "``", "Molimo", ",", "Maro-Sorcerer", "''", "refers", "to", "name", "=", "'Molimo", ",", "Maro-Sorcerer", "'", ";", "list", "of", "all", "types", "refers", "to", "subtypes", ",", "supertypes"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'", "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' THEN 1 ELSE NULL END) FROM cards", "question_toks": ["How", "many", "artists", "have", "designed", "a", "card", "with", "a", "black", "border", "color", "and", "is", "available", "in", "both", "``", "arena", "''", "and", "``", "mtgo", "''", "printing", "type", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "CASE", "WHEN", "availability", "LIKE", "'", "%", "arena", ",", "mtgo", "%", "'", "THEN", "1", "ELSE", "NULL", "END", ")", "FROM", "cards"], "evidence_toks": ["available", "in", "both", "``", "arena", "''", "and", "``", "mtgo", "''", "refers", "to", "availability", "like", "'", "%", "arena", ",", "mtgo", "%", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.", "evidence": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'", "SQL": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3", "question_toks": ["Please", "list", "the", "names", "of", "the", "top", "3", "cards", "with", "the", "highest", "converted", "mana", "cost", "and", "have", "a", "2003", "card", "frame", "style", "."], "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "frameVersion", "=", "2003", "ORDER", "BY", "convertedManaCost", "DESC", "LIMIT", "3"], "evidence_toks": ["name", "of", "cards", "refers", "to", "name", ";", "2003", "card", "frame", "style", "refers", "to", "frameVersion", "=", "'2003", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?", "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'", "SQL": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL", "question_toks": ["How", "many", "translations", "are", "there", "for", "the", "set", "of", "cards", "with", "``", "Angel", "of", "Mercy", "''", "in", "it", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "translation", ")", "FROM", "set_translations", "WHERE", "setCode", "IN", "(", "SELECT", "setCode", "FROM", "cards", "WHERE", "name", "=", "'Angel", "of", "Mercy", "'", ")", "AND", "translation", "IS", "NOT", "NULL"], "evidence_toks": ["set", "of", "cards", "with", "``", "Angel", "of", "Mercy", "''", "in", "it", "refers", "to", "name", "=", "'Angel", "of", "Mercy", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'", "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'", "question_toks": ["Please", "list", "the", "names", "of", "the", "cards", "in", "the", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.setCode", "WHERE", "T2.translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "evidence_toks": ["card", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "refers", "to", "translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?", "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'", "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'", "question_toks": ["Among", "the", "cards", "in", "the", "set", "``", "Hauptset", "Zehnte", "Edition", "''", ",", "how", "many", "of", "them", "are", "designed", "by", "Adam", "Rex", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.setCode", "WHERE", "T2.translation", "=", "'Hauptset", "Zehnte", "Edition", "'", "AND", "T1.artist", "=", "'Adam", "Rex", "'"], "evidence_toks": ["card", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "refers", "to", "translation", "=", "'Hauptset", "Zehnte", "Edition", "'", ";", "designed", "by", "Adam", "refers", "to", "artist", "=", "'Adam", "Rex", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "When was the set of cards with \"Ancestor's Chosen\" released?", "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate", "SQL": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "question_toks": ["When", "was", "the", "set", "of", "cards", "with", "``", "Ancestor", "'s", "Chosen", "''", "released", "?"], "SQL_toks": ["SELECT", "DISTINCT", "T2.releaseDate", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["card", "set", "``", "Ancestor", "'s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", ";", "when", "released", "refers", "to", "releaseDate"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?", "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;", "SQL": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'", "question_toks": ["Is", "the", "set", "of", "cards", "with", "Adarkar", "Valkyrie", "only", "available", "outside", "the", "United", "States", "?"], "SQL_toks": ["SELECT", "IIF", "(", "isForeignOnly", "=", "1", ",", "'YES", "'", ",", "'NO", "'", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Adarkar", "Valkyrie", "'"], "evidence_toks": ["card", "set", "Adarkar", "Valkyrie", "refers", "to", "name", "=", "'Adarkar", "Valkyrie", "'", ";", "isForeignOnly", "=", "1", "means", "only", "available", "outside", "the", "United", "States", ";"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "evidence": "card set Coldsnap refers to name = 'Coldsnap'", "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1", "question_toks": ["Please", "list", "the", "name", "of", "the", "cards", "in", "the", "set", "Coldsnap", "with", "the", "highest", "converted", "mana", "cost", "."], "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'", "ORDER", "BY", "T1.convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');", "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist", "question_toks": ["Which", "of", "these", "artists", "have", "designed", "a", "card", "in", "the", "set", "Coldsnap", ",", "Jeremy", "Jarvis", ",", "Aaron", "Miller", "or", "Chippy", "?"], "SQL_toks": ["SELECT", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "(", "T2.name", "=", "'Coldsnap", "'", "AND", "T1.artist", "=", "'Chippy", "'", ")", "OR", "(", "T2.name", "=", "'Coldsnap", "'", "AND", "T1.artist", "=", "'Aaron", "Miller", "'", ")", "OR", "(", "T2.name", "=", "'Coldsnap", "'", "AND", "T1.artist", "=", "'Jeremy", "Jarvis", "'", ")", "GROUP", "BY", "T1.artist"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "Jeremy", "Jarvis", ",", "Aaron", "Miller", "or", "Chippy", "are", "the", "name", "of", "artists", "which", "refers", "to", "artist", "IN", "(", "'Jeremy", "Jarvis", "'", ",", "'Aaron", "Miller", "'", ",", "'Chippy", "'", ")", ";"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null", "SQL": "SELECT SUM(CASE WHEN T1.power LIKE '%*%' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5", "question_toks": ["Among", "the", "cards", "with", "converted", "mana", "cost", "higher", "than", "5", "in", "the", "set", "Coldsnap", ",", "how", "many", "of", "them", "have", "unknown", "power", "?"], "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "T1.power", "LIKE", "'", "%", "*", "%", "'", "OR", "T1.power", "IS", "NULL", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'", "AND", "T1.convertedManaCost", ">", "5"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "converted", "mana", "cost", "higher", "than", "5", "refers", "to", "convertedManaCost", ">", "5", ";", "unknown", "power", "refers", "to", "power", "=", "'*", "'", "or", "T1.power", "is", "null"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?", "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'", "SQL": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'", "question_toks": ["What", "is", "the", "Italian", "flavor", "text", "of", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "?"], "SQL_toks": ["SELECT", "T2.flavorText", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'", "AND", "T2.language", "=", "'Italian", "'"], "evidence_toks": ["Italian", "refers", "to", "language", "=", "'Italian", "'", ";", "flavor", "text", "refers", "to", "flavorText", ";", "``", "Ancestor", "''", "s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null", "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen'", "question_toks": ["Please", "list", "all", "the", "foreign", "languages", "in", "which", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "has", "a", "flavor", "text", "."], "SQL_toks": ["SELECT", "T2.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["``", "Ancestor", "''", "s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", ";", "has", "a", "flavor", "text", "refers", "to", "flavorText", "is", "not", "null"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'", "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'", "question_toks": ["Please", "list", "the", "Italian", "text", "ruling", "of", "all", "the", "cards", "in", "the", "set", "Coldsnap", "."], "SQL_toks": ["SELECT", "DISTINCT", "T1.text", "FROM", "foreign_data", "AS", "T1", "INNER", "JOIN", "cards", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "INNER", "JOIN", "sets", "AS", "T3", "ON", "T3.code", "=", "T2.setCode", "WHERE", "T3.name", "=", "'Coldsnap", "'", "AND", "T1.language", "=", "'Italian", "'"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "Italian", "refers", "to", "language", "=", "'Italian", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'", "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1", "question_toks": ["Please", "list", "the", "Italian", "names", "of", "the", "cards", "in", "the", "set", "Coldsnap", "with", "the", "highest", "converted", "mana", "cost", "."], "SQL_toks": ["SELECT", "T2.name", "FROM", "foreign_data", "AS", "T1", "INNER", "JOIN", "cards", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "INNER", "JOIN", "sets", "AS", "T3", "ON", "T3.code", "=", "T2.setCode", "WHERE", "T3.name", "=", "'Coldsnap", "'", "AND", "T1.language", "=", "'Italian", "'", "ORDER", "BY", "T2.convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "Italian", "refers", "to", "language", "=", "'Italian", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "When was the ruling for the card 'Reminisce' created?", "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date", "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'", "question_toks": ["When", "was", "the", "ruling", "for", "the", "card", "'Reminisce", "'", "created", "?"], "SQL_toks": ["SELECT", "T2.date", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Reminisce", "'"], "evidence_toks": ["Reminisce", "refers", "to", "name", "=", "'Reminisce", "'", ";", "when", "created", "is", "the", "date"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100\n\n", "SQL": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "question_toks": ["What", "is", "the", "percentage", "of", "incredibly", "powerful", "cards", "in", "the", "set", "Coldsnap", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T1.cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "T1.cardKingdomId", "IS", "NOT", "NULL", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "foil", "is", "incredibly", "powerful", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null", ";", "the", "percentage", "of", "incredibly", "powerful", "cards", "in", "the", "set", "refers", "to", "DIVIDE", "(", "SUM", "(", "incredibly", "powerful", ")", ",", "SUM", "(", "name", "=", "'Coldsnap", "'", ")", ")", "*100"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "What's the code for the set which was released on 2017/7/14?", "evidence": "released on 2017/7/14 refers to releaseDate = '2017-07-14'", "SQL": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code", "question_toks": ["What", "'s", "the", "code", "for", "the", "set", "which", "was", "released", "on", "2017/7/14", "?"], "SQL_toks": ["SELECT", "code", "FROM", "sets", "WHERE", "releaseDate", "=", "'2017-07-14", "'", "GROUP", "BY", "releaseDate", ",", "code"], "evidence_toks": ["released", "on", "2017/7/14", "refers", "to", "releaseDate", "=", "'2017-07-14", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "For the set which had 'SS2' as the code, what is its magic card market id?", "evidence": "magic card market id refers to mcmId", "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'", "question_toks": ["For", "the", "set", "which", "had", "'SS2", "'", "as", "the", "code", ",", "what", "is", "its", "magic", "card", "market", "id", "?"], "SQL_toks": ["SELECT", "mcmId", "FROM", "sets", "WHERE", "code", "=", "'SS2", "'"], "evidence_toks": ["magic", "card", "market", "id", "refers", "to", "mcmId"], "difficulty": "simple"}, {"db_id": "card_games", "question": "For the set \"From the Vault: Lore\", what is its expansion type?", "evidence": "set \"From the Vault refers to name = 'From the Vault: Lore'; expansion type refers to type", "SQL": "SELECT type FROM sets WHERE name = 'FROM the Vault: Lore'", "question_toks": ["For", "the", "set", "``", "From", "the", "Vault", ":", "Lore", "''", ",", "what", "is", "its", "expansion", "type", "?"], "SQL_toks": ["SELECT", "type", "FROM", "sets", "WHERE", "name", "=", "'FROM", "the", "Vault", ":", "Lore", "'"], "evidence_toks": ["set", "``", "From", "the", "Vault", "refers", "to", "name", "=", "'From", "the", "Vault", ":", "Lore", "'", ";", "expansion", "type", "refers", "to", "type"], "difficulty": "simple"}, {"db_id": "card_games", "question": "For the set \"Commander 2014 Oversized\" , give its parent code.", "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';", "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'", "question_toks": ["For", "the", "set", "``", "Commander", "2014", "Oversized", "''", ",", "give", "its", "parent", "code", "."], "SQL_toks": ["SELECT", "parentCode", "FROM", "sets", "WHERE", "name", "=", "'Commander", "2014", "Oversized", "'"], "evidence_toks": ["the", "set", "``", "Commander", "2014", "Oversized", "''", "refers", "to", "name", "=", "'Commander", "2014", "Oversized", "'", ";"], "difficulty": "simple"}, {"db_id": "card_games", "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.", "evidence": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;", "SQL": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'", "question_toks": ["For", "all", "cards", "illustrated", "by", "Jim", "Pavelec", ".", "and", "describe", "the", "text", "of", "the", "ruling", "of", "these", "cards", ".", "Do", "these", "cards", "have", "missing", "or", "degraded", "properties", "and", "values", "."], "SQL_toks": ["SELECT", "T2.text", ",", "CASE", "WHEN", "T1.hasContentWarning", "=", "1", "THEN", "'YES", "'", "ELSE", "'NO", "'", "END", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.artist", "=", "'Jim", "Pavelec", "'"], "evidence_toks": ["all", "cards", "illustrated", "by", "Jim", "Pavelec", "refers", "to", "artist", "=", "'Jim", "Pavelec", "'", ";", "the", "text", "of", "the", "ruling", "refers", "to", "text", ";", "cards", "have", "missing", "or", "degraded", "properties", "and", "values", "if", "hasContentWarning", "=", "1", "else", "it", "does", "n't", "have", ";"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "What was the release date for the set which card \"Evacuation\" in it?", "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate", "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'", "question_toks": ["What", "was", "the", "release", "date", "for", "the", "set", "which", "card", "``", "Evacuation", "''", "in", "it", "?"], "SQL_toks": ["SELECT", "T2.releaseDate", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Evacuation", "'"], "evidence_toks": ["``", "Evacuation", "''", "refers", "to", "name", "=", "'Evacuation", "'", ";", "release", "date", "refers", "to", "releaseDate"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?", "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation", "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL", "question_toks": ["What", "'s", "the", "French", "name", "of", "the", "set", "of", "cards", "with", "``", "Tendo", "Ice", "Bridge", "''", "is", "in", "?"], "SQL_toks": ["SELECT", "T2.translation", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Tendo", "Ice", "Bridge", "'", "AND", "T2.language", "=", "'French", "'", "AND", "T2.translation", "IS", "NOT", "NULL"], "evidence_toks": ["French", "refers", "to", "language", "=", "'French", "'", ";", "``", "Tendo", "Ice", "Bridge", "''", "is", "a", "translated", "name", "of", "a", "card", ";", "translated", "name", "refers", "to", "translation"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.", "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'", "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL", "question_toks": ["Tell", "the", "Japanese", "name", "of", "the", "set", "which", "card", "``", "Fellwar", "Stone", "''", "is", "in", "it", "."], "SQL_toks": ["SELECT", "T2.translation", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Fellwar", "Stone", "'", "AND", "T2.language", "=", "'Japanese", "'", "AND", "T2.translation", "IS", "NOT", "NULL"], "evidence_toks": ["Japanese", "name", "refers", "to", "language", "=", "'Japanese", "'", ";", "card", "``", "Fellwar", "Stone", "''", "refers", "to", "name", "=", "'Fellwar", "Stone", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Which card in the set 'Journey into Nyx Hero's Path' with the highest converted mana cost.", "evidence": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'", "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1", "question_toks": ["Which", "card", "in", "the", "set", "'Journey", "into", "Nyx", "Hero", "'s", "Path", "'", "with", "the", "highest", "converted", "mana", "cost", "."], "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Journey", "into", "Nyx", "Hero", "''", "s", "Path", "'", "ORDER", "BY", "T1.convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["set", "'Journey", "into", "Nyx", "Hero", "'s", "Path", "'", "refers", "to", "name", "=", "'Journey", "into", "Nyx", "Hero", "''", "s", "Path", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?", "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100", "SQL": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )", "question_toks": ["For", "all", "the", "set", "of", "cards", "that", "has", "Brazil", "Portuguese", "translation", ",", "what", "is", "the", "percentage", "of", "them", "are", "only", "available", "online", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "isOnlineOnly", "=", "1", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "id", ")", "FROM", "sets", "WHERE", "code", "IN", "(", "SELECT", "setCode", "FROM", "set_translations", "WHERE", "language", "=", "'Portuguese", "(", "Brazil", ")", "'", ")"], "evidence_toks": ["Brazil", "Portuguese", "translation", "refers", "to", "language", "=", "'Portuguese", "(", "Brazil", ")", "'", ";", "only", "available", "online", "refers", "to", "isOnlineOnly", "=", "1", ";", "percentage", "of", "online", "only", "Brazil", "Portuguese", "in", "all", "Brazil", "Portuguese", "cards", "refers", "to", "DIVIDE", "(", "SUM", "(", "isOnlineOnly", "=", "1", ")", ",", "SUM", "(", "language", "=", "'Portuguese", "(", "Brazil", ")", ")", ")", "*100"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?", "evidence": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability", "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1", "question_toks": ["What", "are", "the", "available", "printing", "types", "of", "the", "cards", "that", "does", "n't", "have", "a", "text", "box", "created", "by", "Aleksi", "Briclot", "?"], "SQL_toks": ["SELECT", "DISTINCT", "availability", "FROM", "cards", "WHERE", "artist", "=", "'Aleksi", "Briclot", "'", "AND", "isTextless", "=", "1"], "evidence_toks": ["created", "by", "Aleksi", "Briclot", "refers", "to", "artist", "=", "'Aleksi", "Briclot", "'", ";", "does", "n't", "have", "a", "text", "box", "refers", "to", "isTextless", "=", "1", ";", "available", "printing", "types", "refers", "to", "availability"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "evidence": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist", "SQL": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1", "question_toks": ["Among", "the", "cards", "that", "does", "n't", "have", "multiple", "faces", "on", "the", "same", "card", ",", "who", "is", "the", "illustrator", "of", "the", "card", "art", "that", "has", "the", "highest", "cost", "of", "converted", "mana", "?"], "SQL_toks": ["SELECT", "artist", "FROM", "cards", "WHERE", "side", "IS", "NULL", "ORDER", "BY", "convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["does", "n't", "have", "multiple", "faces", "refers", "to", "side", "IS", "NULL", ";", "illustrator", "refers", "to", "artist"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What is the most common visual frame effects among the incredibly powerful foils?", "evidence": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)", "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1", "question_toks": ["What", "is", "the", "most", "common", "visual", "frame", "effects", "among", "the", "incredibly", "powerful", "foils", "?"], "SQL_toks": ["SELECT", "frameEffects", "FROM", "cards", "WHERE", "cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "cardKingdomId", "IS", "NOT", "NULL", "GROUP", "BY", "frameEffects", "ORDER", "BY", "COUNT", "(", "frameEffects", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["when", "both", "cardKingdomFoilId", "and", "cardKingdomId", "are", "not", "null", ",", "this", "foil", "is", "incredibly", "powerful", ";", "most", "common", "visual", "frame", "effects", "refers", "to", "MAX", "(", "frameEffects", ")"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "How many cards with unknown power that can't be found in foil is in duel deck A?", "evidence": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'", "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'", "question_toks": ["How", "many", "cards", "with", "unknown", "power", "that", "ca", "n't", "be", "found", "in", "foil", "is", "in", "duel", "deck", "A", "?"], "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "power", "LIKE", "'", "%", "*", "%", "'", "OR", "power", "IS", "NULL", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards", "WHERE", "hasFoil", "=", "0", "AND", "duelDeck", "=", "'", "a", "'"], "evidence_toks": ["unknown", "power", "refers", "to", "power", "IS", "NULL", "or", "power", "=", "'*", "'", ";", "ca", "n't", "be", "found", "in", "foil", "refers", "to", "hasFoil", "=", "0", ";", "duel", "deck", "A", "refers", "to", "duelDeck", "=", "'", "a", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.", "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)", "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1", "question_toks": ["Among", "the", "sets", "whose", "expansion", "type", "is", "Commander", ",", "which", "set", "has", "the", "highest", "total", "number", "of", "cards", "including", "promotional", "and", "related", "supplemental", "products", "but", "excluding", "Alchemy", "modifications", "?", "Indicate", "the", "id", "of", "the", "set", "."], "SQL_toks": ["SELECT", "id", "FROM", "sets", "WHERE", "type", "=", "'commander", "'", "ORDER", "BY", "totalSetSize", "DESC", "LIMIT", "1"], "evidence_toks": ["expansion", "type", "refers", "to", "type", "where", "type", "=", "'commander", "'", ";", "totalSetSize", ":", "The", "total", "number", "of", "cards", "in", "the", "set", ",", "including", "promotional", "and", "related", "supplemental", "products", "but", "excluding", "Alchemy", "modifications", ";", "highest", "total", "number", "of", "cards", "refers", "to", "MAX", "(", "totalSetSize", ")"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?", "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)", "SQL": "SELECT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 9", "question_toks": ["In", "duels", ",", "what", "are", "the", "top", "10", "cards", "with", "the", "highest", "uncoverted", "mana", "cost", "?"], "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "uuid", "IN", "(", "SELECT", "uuid", "FROM", "legalities", "WHERE", "format", "=", "'duel", "'", ")", "ORDER", "BY", "manaCost", "DESC", "LIMIT", "0", ",", "9"], "evidence_toks": ["duels", "refer", "to", "format", "=", "'duel", "'", ";", "the", "highest", "uncoverted", "mana", "cost", "refers", "to", "MAX", "(", "manaCost", ")"], "difficulty": "simple"}, {"db_id": "card_games", "question": "When was the oldest mythic card released and what are its legal play formats?", "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format", "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1", "question_toks": ["When", "was", "the", "oldest", "mythic", "card", "released", "and", "what", "are", "its", "legal", "play", "formats", "?"], "SQL_toks": ["SELECT", "T1.originalReleaseDate", ",", "T2.format", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.rarity", "=", "'mythic", "'", "AND", "T1.originalReleaseDate", "IS", "NOT", "NULL", "AND", "T2.status", "=", "'Legal", "'", "ORDER", "BY", "T1.originalReleaseDate", "LIMIT", "1"], "evidence_toks": ["the", "oldest", "card", "refers", "to", "MIN", "(", "originalReleaseDate", ")", ";", "mythic", "card", "refers", "to", "rarity", "=", "'mythic", "'", ";", "legal", "play", "refers", "to", "status", "=", "'legal", "'", ";", "play", "format", "refers", "to", "format"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "evidence": "Volkan Ba\u00c7\u00b5a refers to artist = 'Volkan Baga'; foreign language is in French refers to language = 'French'", "SQL": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3", "question_toks": ["How", "many", "cards", "did", "Volkan", "Ba\u00c7\u00b5a", "illustrated", "whose", "foreign", "language", "is", "in", "French", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T3.id", ")", "FROM", "(", "SELECT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.artist", "=", "'Volkan", "Ba\u01f5a", "'", "AND", "T2.language", "=", "'French", "'", "GROUP", "BY", "T1.id", ")", "AS", "T3"], "evidence_toks": ["Volkan", "Ba\u00c7\u00b5a", "refers", "to", "artist", "=", "'Volkan", "Baga", "'", ";", "foreign", "language", "is", "in", "French", "refers", "to", "language", "=", "'French", "'"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "What is the language of the \"Battlebond\" set?", "evidence": "\"Battlebond\" set refers to name = 'Battlebond'", "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )", "question_toks": ["What", "is", "the", "language", "of", "the", "``", "Battlebond", "''", "set", "?"], "SQL_toks": ["SELECT", "language", "FROM", "set_translations", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "sets", "WHERE", "name", "=", "'Battlebond", "'", ")"], "evidence_toks": ["``", "Battlebond", "''", "set", "refers", "to", "name", "=", "'Battlebond", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.", "evidence": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)", "SQL": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1", "question_toks": ["Who", "is", "the", "illustrator", "that", "illustrated", "the", "least", "amount", "of", "cards", "?", "List", "the", "format", "of", "play", "of", "the", "cards", "that", "he/she", "illustrated", "."], "SQL_toks": ["SELECT", "T1.artist", ",", "T2.format", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "GROUP", "BY", "T1.artist", "ORDER", "BY", "COUNT", "(", "T1.id", ")", "ASC", "LIMIT", "1"], "evidence_toks": ["format", "of", "the", "cards", "refers", "to", "format", ";", "illustrator", "refers", "to", "artist", ";", "the", "least", "amount", "of", "cards", "refers", "to", "MIN", "(", "artist", ")"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card for each year.", "evidence": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(language)", "SQL": "SELECT T1.releaseDate, CAST(SUM(T1.id) AS REAL) / COUNT(T1.id) , T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY T2.language DESC LIMIT 1", "question_toks": ["What", "is", "the", "annual", "average", "number", "of", "sets", "that", "were", "released", "between", "1/1/2012", "to", "12/31/2015", "?", "Indicate", "the", "common", "langugage", "of", "the", "card", "for", "each", "year", "."], "SQL_toks": ["SELECT", "T1.releaseDate", ",", "CAST", "(", "SUM", "(", "T1.id", ")", "AS", "REAL", ")", "/", "COUNT", "(", "T1.id", ")", ",", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "T1.releaseDate", "BETWEEN", "'2012-01-01", "'", "AND", "'2015-12-31", "'", "GROUP", "BY", "T1.releaseDate", "ORDER", "BY", "T2.language", "DESC", "LIMIT", "1"], "evidence_toks": ["AVG", "(", "id", ")", ";", "releaseDate", "BETWEEN", "1/1/2012", "AND", "12/31/2015", ";", "the", "common", "language", "refers", "to", "MAX", "(", "language", ")"], "difficulty": "challenging"}, {"db_id": "card_games", "question": "List the artists who illustrated cards with black borders which are available only in arena.", "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'", "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'", "question_toks": ["List", "the", "artists", "who", "illustrated", "cards", "with", "black", "borders", "which", "are", "available", "only", "in", "arena", "."], "SQL_toks": ["SELECT", "DISTINCT", "artist", "FROM", "cards", "WHERE", "availability", "=", "'arena", "'", "AND", "BorderColor", "=", "'black", "'"], "evidence_toks": ["black", "borders", "refers", "to", "BorderColor", "=", "'black", "'", ";", "available", "only", "in", "arena", "refers", "to", "availability", "=", "'arena", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "Find the uuid of cards in which the old school format is restricted or banned.", "evidence": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'", "SQL": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')", "question_toks": ["Find", "the", "uuid", "of", "cards", "in", "which", "the", "old", "school", "format", "is", "restricted", "or", "banned", "."], "SQL_toks": ["SELECT", "uuid", "FROM", "legalities", "WHERE", "format", "=", "'oldschool", "'", "AND", "(", "status", "=", "'Banned", "'", "OR", "status", "=", "'Restricted", "'", ")"], "evidence_toks": ["old", "school", "format", "refers", "to", "format", "=", "'oldschool", "'", ";", "restricted", "or", "banned", "refers", "to", "status", "=", "'banned", "'", "or", "'restricted", "'"], "difficulty": "simple"}, {"db_id": "card_games", "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.", "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);", "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC", "question_toks": ["What", "are", "the", "rulings", "for", "the", "card", "named", "and", "designed", "by", "Kev", "Walker", "?", "List", "them", "in", "descending", "order", "of", "dates", "."], "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.artist", "=", "'Kev", "Walker", "'", "ORDER", "BY", "T2.date", "DESC"], "evidence_toks": ["rulings", "refers", "to", "text", ";", "card", "named", "and", "designed", "by", "Kev", "Walker", "refers", "to", "artist", "=", "'Kev", "Walker", "'", ";", "descending", "order", "of", "dates", "refers", "to", "MAX", "(", "date", ")", ";"], "difficulty": "moderate"}, {"db_id": "card_games", "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.", "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'legal'; the formats refers to format", "SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )", "question_toks": ["List", "the", "names", "of", "all", "the", "cards", "in", "the", "set", "Hour", "of", "Devastation", "and", "find", "the", "formats", "in", "which", "these", "cards", "are", "legal", "."], "SQL_toks": ["SELECT", "DISTINCT", "T2.name", ",", "CASE", "WHEN", "T1.status", "=", "'Legal", "'", "THEN", "T1.format", "ELSE", "NULL", "END", "FROM", "legalities", "AS", "T1", "INNER", "JOIN", "cards", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T2.setCode", "IN", "(", "SELECT", "code", "FROM", "sets", "WHERE", "name", "=", "'Hour", "of", "Devastation", "'", ")"], "evidence_toks": ["the", "set", "Hour", "of", "Devastation", "refers", "to", "set.name", "=", "'Hour", "of", "Devastation", "'", ";", "names", "of", "all", "the", "cards", "in", "the", "set", "refers", "to", "cards.name", ";", "legal", "cards", "refers", "to", "status", "=", "'legal", "'", ";", "the", "formats", "refers", "to", "format"], "difficulty": "challenging"}]