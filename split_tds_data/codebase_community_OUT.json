[{"db_id": "codebase_community", "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)", "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )", "question_toks": ["Which", "user", "has", "a", "higher", "reputation", ",", "Harlan", "or", "Jarrod", "Dixon", "?"], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "DisplayName", "IN", "(", "'Harlan", "'", ",", "'Jarrod", "Dixon", "'", ")", "AND", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", "WHERE", "DisplayName", "IN", "(", "'Harlan", "'", ",", "'Jarrod", "Dixon", "'", ")", ")"], "evidence_toks": ["``", "Harlan", "''", "and", "``", "Jarrod", "Dixon", "''", "are", "both", "DisplayName", ";", "highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1", "SQL": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1", "question_toks": ["Among", "the", "users", "who", "have", "more", "than", "100", "upvotes", ",", "how", "many", "of", "them", "have", "more", "then", "1", "downvotes", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Upvotes", ">", "100", "AND", "Downvotes", ">", "1"], "evidence_toks": ["more", "than", "100", "upvotes", "refers", "to", "Upvotes", ">", "100", ";", "more", "than", "1", "downvotes", "refers", "to", "Downvotes", ">", "1"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many users with more than 10 views created their account after the year 2013?", "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013", "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10", "question_toks": ["How", "many", "users", "with", "more", "than", "10", "views", "created", "their", "account", "after", "the", "year", "2013", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", ">", "'2013", "'", "AND", "Views", ">", "10"], "evidence_toks": ["more", "than", "10", "views", "refers", "to", "Views", ">", "10", ";", "created", "after", "the", "year", "2013", "refers", "to", "year", "(", "CreationDate", ")", ">", "2013"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the display name of the user who is the owner of the most valuable post?", "evidence": "most valuable post refers to Max(FavoriteCount)", "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "is", "the", "owner", "of", "the", "most", "valuable", "post", "?"], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "ORDER", "BY", "T1.FavoriteCount", "DESC", "LIMIT", "1"], "evidence_toks": ["most", "valuable", "post", "refers", "to", "Max", "(", "FavoriteCount", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)", "SQL": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["For", "the", "post", "that", "got", "the", "most", "number", "of", "answers", "owned", "by", "csgillespie", ",", "how", "many", "answers", "did", "it", "get", "?"], "SQL_toks": ["SELECT", "MAX", "(", "T1.AnswerCount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "the", "most", "number", "of", "answer", "refers", "to", "Max", "(", "AnswerCount", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the posts owned by csgillespie, how many of them are root posts?", "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null", "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL", "question_toks": ["Among", "the", "posts", "owned", "by", "csgillespie", ",", "how", "many", "of", "them", "are", "root", "posts", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'", "AND", "T1.ParentId", "IS", "NULL"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "root", "post", "refers", "to", "ParentId", "IS", "Null"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Please list the display names of all the users who owns a post that is well-finished.", "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null", "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL", "question_toks": ["Please", "list", "the", "display", "names", "of", "all", "the", "users", "who", "owns", "a", "post", "that", "is", "well-finished", "."], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.ClosedDate", "IS", "NOT", "NULL"], "evidence_toks": ["the", "post", "that", "is", "well-finished", "refers", "to", "ClosedDate", "IS", "NOT", "Null"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the posts owned by an elder user, how many of them have a score of over 19?", "evidence": "elder users refers to Age > 65; Score of over 20 refers to Score > = 20", "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65", "question_toks": ["Among", "the", "posts", "owned", "by", "an", "elder", "user", ",", "how", "many", "of", "them", "have", "a", "score", "of", "over", "19", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Score", ">", "=", "20", "AND", "T2.Age", ">", "65"], "evidence_toks": ["elder", "users", "refers", "to", "Age", ">", "65", ";", "Score", "of", "over", "20", "refers", "to", "Score", ">", "=", "20"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post", "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'", "question_toks": ["What", "is", "the", "location", "of", "the", "owner", "of", "the", "post", "``", "Eliciting", "priors", "from", "experts", "''", "?"], "SQL_toks": ["SELECT", "T2.Location", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Eliciting", "priors", "FROM", "experts", "'"], "evidence_toks": ["Owner", "refers", "to", "OwnerUserId", ";", "'Eliciting", "priors", "from", "experts", "'", "is", "the", "Title", "of", "post"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId", "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'", "question_toks": ["From", "which", "post", "is", "the", "tag", "``", "bayesian", "''", "excerpted", "from", "?", "Please", "give", "the", "body", "of", "the", "post", "."], "SQL_toks": ["SELECT", "T2.Body", "FROM", "tags", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T2.Id", "=", "T1.ExcerptPostId", "WHERE", "T1.TagName", "=", "'bayesian", "'"], "evidence_toks": ["``", "bayesian", "''", "is", "the", "TagName", ";", "excerpt", "from", "refers", "to", "ExcerptPostId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "From which post is the most popular tag excerpted from? Please give the body of the post.", "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId", "SQL": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )", "question_toks": ["From", "which", "post", "is", "the", "most", "popular", "tag", "excerpted", "from", "?", "Please", "give", "the", "body", "of", "the", "post", "."], "SQL_toks": ["SELECT", "Body", "FROM", "posts", "WHERE", "id", "=", "(", "SELECT", "ExcerptPostId", "FROM", "tags", "ORDER", "BY", "Count", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["most", "popular", "tag", "refers", "to", "Max", "(", "Count", ")", ";", "excerpt", "from", "refer", "to", "ExcerptPostId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Please list the names of the badges obtained by csgillespie.", "evidence": "\"csgillespie\" is the DisplayName of user", "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["Please", "list", "the", "names", "of", "the", "badges", "obtained", "by", "csgillespie", "."], "SQL_toks": ["SELECT", "T1.", "`", "Name", "`", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?", "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011", "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'", "question_toks": ["Among", "the", "badges", "obtained", "by", "csgillespie", ",", "how", "many", "of", "them", "were", "obtained", "in", "the", "year", "2011", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.Date", ")", "=", "'2011", "'", "AND", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "obtained", "in", "2011", "refers", "to", "YEAR", "(", "Date", ")", "=", "2011"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the posts with a score of over 20, what is the percentage of them being owned by an elder user?", "evidence": "score of over 20 refers to Score > 20; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100", "SQL": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20", "question_toks": ["Among", "the", "posts", "with", "a", "score", "of", "over", "20", ",", "what", "is", "the", "percentage", "of", "them", "being", "owned", "by", "an", "elder", "user", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "T2.Age", ">", "65", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Score", ">", "20"], "evidence_toks": ["score", "of", "over", "20", "refers", "to", "Score", ">", "20", ";", "elder", "user", "refers", "to", "Age", ">", "65", ";", "percentage", "=", "Divide", "(", "Count", "(", "Id", "where", "Age", ">", "65", ")", ",", "Count", "(", "Id", ")", ")", "*", "100"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Indicate the creation date of the maximum number of votes.", "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))", "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1", "question_toks": ["Indicate", "the", "creation", "date", "of", "the", "maximum", "number", "of", "votes", "."], "SQL_toks": ["SELECT", "CreationDate", "FROM", "votes", "GROUP", "BY", "CreationDate", "ORDER", "BY", "COUNT", "(", "Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "creation", "date", "of", "the", "maximum", "number", "of", "votes", "refers", "to", "CreationDate", "where", "Max", "(", "Count", "(", "Id", ")", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Give the only one comment text of the post with parent id 107829.", "evidence": "one comment refers to CommentCount = '1'", "SQL": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1", "question_toks": ["Give", "the", "only", "one", "comment", "text", "of", "the", "post", "with", "parent", "id", "107829", "."], "SQL_toks": ["SELECT", "T2.Text", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.ParentId", "=", "107829", "AND", "T1.CommentCount", "=", "1"], "evidence_toks": ["one", "comment", "refers", "to", "CommentCount", "=", "'", "1", "'"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?", "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013/7/12 9:08:18'; not well-finished refers to ClosedDate IS NULL and vice versa", "SQL": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 9:08:18'", "question_toks": ["User", "No.23853", "gave", "a", "comment", "to", "a", "post", "at", "9:08:18", "on", "2013/7/12", ",", "was", "that", "post", "well-finished", "?"], "SQL_toks": ["SELECT", "IIF", "(", "T2.ClosedDate", "IS", "NULL", ",", "'NOT", "well-finished", "'", ",", "'well-finished", "'", ")", "AS", "resylt", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.UserId", "=", "23853", "AND", "T1.CreationDate", "=", "'2013-07-12", "9:08:18", "'"], "evidence_toks": ["user", "no", ".", "23853", "refers", "to", "UserId", "=", "'23853", "'", ";", "at", "9:08:18", "on", "2013/7/12", "refers", "to", "CreationDate", "=", "'2013/7/12", "9:08:18", "'", ";", "not", "well-finished", "refers", "to", "ClosedDate", "IS", "NULL", "and", "vice", "versa"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "evidence": "\"Tiago Pasqualini\" is the DisplayName;", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'", "question_toks": ["For", "the", "user", "with", "the", "display", "name", "of", "``", "Tiago", "Pasqualini", "''", ",", "how", "many", "posts", "did", "he/she", "own", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Tiago", "Pasqualini", "'"], "evidence_toks": ["``", "Tiago", "Pasqualini", "''", "is", "the", "DisplayName", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Provide the display name of the user who made the vote No.381800.", "evidence": "vote no. 381800 refers to Id = '381800'", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 381800", "question_toks": ["Provide", "the", "display", "name", "of", "the", "user", "who", "made", "the", "vote", "No.381800", "."], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Id", "=", "381800"], "evidence_toks": ["vote", "no", ".", "381800", "refers", "to", "Id", "=", "'381800", "'"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'", "question_toks": ["For", "the", "user", "whose", "display", "name", "is", "``", "DatEpicCoderGuyWhoPrograms", "''", ",", "what", "is", "his/her", "badge", "'s", "name", "?"], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'DatEpicCoderGuyWhoPrograms", "'"], "evidence_toks": ["``", "DatEpicCoderGuyWhoPrograms", "''", "is", "the", "DisplayName", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?", "evidence": "user no. 54724 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))", "SQL": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24", "question_toks": ["For", "the", "user", "No.24", ",", "how", "many", "times", "is", "the", "number", "of", "his/her", "posts", "compared", "to", "his/her", "votes", "?"], "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "T2.Id", ")", "AS", "REAL", ")", "/", "COUNT", "(", "DISTINCT", "T1.Id", ")", "FROM", "votes", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.UserId", "=", "T2.OwnerUserId", "WHERE", "T1.UserId", "=", "24"], "evidence_toks": ["user", "no", ".", "54724", "refers", "to", "UserId", "=", "OwnerUserId", "=", "'24", "'", ";", "times", "of", "his/her", "post", "than", "votes", "=", "Divide", "(", "Count", "(", "post.Id", ")", ",", "Count", "(", "votes.Id", ")", ")"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Write the contents of comments with a score of 17.", "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text", "SQL": "SELECT Text FROM comments WHERE Score = 17", "question_toks": ["Write", "the", "contents", "of", "comments", "with", "a", "score", "of", "17", "."], "SQL_toks": ["SELECT", "Text", "FROM", "comments", "WHERE", "Score", "=", "17"], "evidence_toks": ["score", "of", "17", "refers", "to", "Score", "=", "17", ";", "contents", "of", "comments", "refers", "to", "Text"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which user has the website URL listed at 'http://blue-feet.com?'", "evidence": "\"http://blue-feet.com?\" is the WebsiteUrl; user refers to DisplayName", "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://blue-feet.com?'", "question_toks": ["Which", "user", "has", "the", "website", "URL", "listed", "at", "'http", ":", "//blue-feet.com", "?", "'"], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "WebsiteUrl", "=", "'http", ":", "//blue-feet.com", "?", "'"], "evidence_toks": ["``", "http", ":", "//blue-feet.com", "?", "''", "is", "the", "WebsiteUrl", ";", "user", "refers", "to", "DisplayName"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the badge name that user 'SilentGhost' obtained?", "evidence": "\"SilentGhost\" is the DisplayName of user;", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'", "question_toks": ["What", "is", "the", "badge", "name", "that", "user", "'SilentGhost", "'", "obtained", "?"], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'SilentGhost", "'"], "evidence_toks": ["``", "SilentGhost", "''", "is", "the", "DisplayName", "of", "user", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Name the user that commented 'thank you user93!'", "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'", "question_toks": ["Name", "the", "user", "that", "commented", "'thank", "you", "user93", "!", "'"], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Text", "=", "'thank", "you", "user93", "!", "'"], "evidence_toks": ["``", "thank", "you", "user93", "''", "is", "the", "Text", "of", "comment", ";", "user", "refers", "to", "DisplayName"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Write all comments made by user 'A Lion.'", "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text", "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'", "question_toks": ["Write", "all", "comments", "made", "by", "user", "'", "A", "Lion", ".", "'"], "SQL_toks": ["SELECT", "T2.Text", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'", "A", "Lion", "'"], "evidence_toks": ["``", "A", "Lion", "''", "is", "the", "DisplayName", "of", "user", ";", "comment", "refers", "to", "Text"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?", "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;", "SQL": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'", "question_toks": ["Which", "user", "made", "a", "post", "titled", "'Understanding", "what", "Dassault", "iSight", "is", "doing", "?", "'", "and", "how", "much", "is", "the", "reputation", "of", "the", "user", "?"], "SQL_toks": ["SELECT", "T1.DisplayName", ",", "T1.Reputation", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T2.Title", "=", "'Understanding", "what", "Dassault", "iSight", "is", "doing", "?", "'"], "evidence_toks": ["``", "Understanding", "what", "Dassault", "iSight", "is", "doing", "?", "''", "is", "the", "Title", "of", "post", ";", "user", "refers", "to", "DisplayName", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'", "evidence": "last editor refers to LastEditorUserId; 'Open source tools for visualizing multi-dimensional data' is the Title of Post", "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'", "question_toks": ["Who", "is", "the", "editor", "of", "the", "post", "titled", "'Open", "source", "tools", "for", "visualizing", "multi-dimensional", "data", "?", "'"], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Open", "source", "tools", "for", "visualizing", "multi-dimensional", "data", "?", "'"], "evidence_toks": ["last", "editor", "refers", "to", "LastEditorUserId", ";", "'Open", "source", "tools", "for", "visualizing", "multi-dimensional", "data", "'", "is", "the", "Title", "of", "Post"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "List the title of posts which were edited by Vebjorn Ljosa.", "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId", "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'", "question_toks": ["List", "the", "title", "of", "posts", "which", "were", "edited", "by", "Vebjorn", "Ljosa", "."], "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Vebjorn", "Ljosa", "'"], "evidence_toks": ["``", "Vebjorn", "Ljosa", "''", "is", "the", "DisplayName", ";", "last", "edited", "refers", "to", "LastEditorUserId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'", "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;", "SQL": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "question_toks": ["Write", "all", "the", "comments", "left", "by", "users", "who", "edited", "the", "post", "titled", "'Why", "square", "the", "difference", "instead", "of", "taking", "the", "absolute", "value", "in", "standard", "deviation", "?", "'"], "SQL_toks": ["SELECT", "T2.Comment", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "=", "'Why", "square", "the", "difference", "instead", "of", "taking", "the", "absolute", "value", "in", "standard", "deviation", "?", "'"], "evidence_toks": ["``", "Why", "square", "the", "difference", "instead", "of", "taking", "the", "absolute", "value", "in", "standard", "deviation", "?", "''", "is", "the", "Title", "of", "post", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable.", "evidence": "\"humor\" is the Tags; comment of the post refers to Text; average view count = AVG(ViewCount)", "SQL": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Tags = '<humor>'", "question_toks": ["Calculate", "the", "average", "view", "count", "of", "posts", "tagged", "as", "'humor", "'", "and", "write", "the", "title", "and", "the", "comments", "of", "the", "posts", "alongside", "their", "scores", "if", "applicable", "."], "SQL_toks": ["SELECT", "AVG", "(", "T2.ViewCount", ")", ",", "T2.Title", ",", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T1.PostId", "WHERE", "T2.Tags", "=", "'", "<", "humor", ">", "'"], "evidence_toks": ["``", "humor", "''", "is", "the", "Tags", ";", "comment", "of", "the", "post", "refers", "to", "Text", ";", "average", "view", "count", "=", "AVG", "(", "ViewCount", ")"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Which user ID has the highest reputation?", "evidence": "highest reputation refers to Max(Reputation)", "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "question_toks": ["Which", "user", "ID", "has", "the", "highest", "reputation", "?"], "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which user ID has the lowest view?", "evidence": "lowest views refers to Min(Views)", "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )", "question_toks": ["Which", "user", "ID", "has", "the", "lowest", "view", "?"], "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MIN", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["lowest", "views", "refers", "to", "Min", "(", "Views", ")"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many users from New York have a teacher and supporter badge?", "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId", "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teachers') AND T2.Location = 'New York'", "question_toks": ["How", "many", "users", "from", "New", "York", "have", "a", "teacher", "and", "supporter", "badge", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Name", "IN", "(", "'Supporter", "'", ",", "'Teachers", "'", ")", "AND", "T2.Location", "=", "'New", "York", "'"], "evidence_toks": ["``", "Supporter", "''", "and", "``", "Teachers", "''", "are", "both", "Name", "of", "badge", ";", "'New", "York", "'", "is", "the", "Location", ";", "user", "refers", "to", "UserId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which user created post ID 1 and what is the reputation of this user?", "evidence": "", "SQL": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1", "question_toks": ["Which", "user", "created", "post", "ID", "1", "and", "what", "is", "the", "reputation", "of", "this", "user", "?"], "SQL_toks": ["SELECT", "T2.Id", ",", "T2.Reputation", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.PostId", "=", "1"], "evidence_toks": [], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which user have only one post history per post and having at least 1000 views?", "evidence": "having at least 1000 view refers to Views > = 1000; one post history refers to PostHistoryTypeID = 1; user refers to UserId", "SQL": "SELECT DISTINCT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T2.UserId = T2.Id WHERE T2.PostHistoryTypeID = 1 AND T1.Views >= 1000", "question_toks": ["Which", "user", "have", "only", "one", "post", "history", "per", "post", "and", "having", "at", "least", "1000", "views", "?"], "SQL_toks": ["SELECT", "DISTINCT", "T2.UserId", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T2.UserId", "=", "T2.Id", "WHERE", "T2.PostHistoryTypeID", "=", "1", "AND", "T1.Views", ">", "=", "1000"], "evidence_toks": ["having", "at", "least", "1000", "view", "refers", "to", "Views", ">", "=", "1000", ";", "one", "post", "history", "refers", "to", "PostHistoryTypeID", "=", "1", ";", "user", "refers", "to", "UserId"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "How many users from India have the teacher badges?", "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge", "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'", "question_toks": ["How", "many", "users", "from", "India", "have", "the", "teacher", "badges", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.Location", "=", "'India", "'", "AND", "T1.Name", "=", "'Teacher", "'"], "evidence_toks": ["``", "India", "''", "is", "the", "Location", ";", "``", "Teacher", "''", "is", "the", "Name", "of", "badge"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the percentage difference of student badges given during 2010 and 2011?", "evidence": "\"Students\" is the Name of badge;\u00a0 during 2010 refers to Year(Date) = 2010; 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)", "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'", "question_toks": ["What", "is", "the", "percentage", "difference", "of", "student", "badges", "given", "during", "2010", "and", "2011", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2010", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "-", "CAST", "(", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2011", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Student", "'"], "evidence_toks": ["``", "Students", "''", "is", "the", "Name", "of", "badge", ";", "during", "2010", "refers", "to", "Year", "(", "Date", ")", "=", "2010", ";", "2011", "refers", "to", "Year", "(", "Date", ")", "=", "2011", ";", "percentage", "difference", "=", "Subtract", "(", "Divide", "(", "Count", "(", "Name", "where", "Year", "(", "Date", ")", "=", "2010", ")", ",", "Count", "(", "Name", ")", ")", "*100", ",", "Divide", "(", "Count", "(", "Name", "where", "Year", "(", "Date", ")", "=", "2011", ")", ",", "Count", "(", "Name", ")", ")", "*", "100", ")"], "difficulty": "challenging"}, {"db_id": "codebase_community", "question": "What is the score and the link type ID for post ID 395?", "evidence": "", "SQL": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395", "question_toks": ["What", "is", "the", "score", "and", "the", "link", "type", "ID", "for", "post", "ID", "395", "?"], "SQL_toks": ["SELECT", "T1.Score", ",", "T2.LinkTypeId", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T2.PostId", "=", "395"], "evidence_toks": [], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?", "evidence": "creating more than 10 post refers to Count (UserId) > 10; up votes average = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))", "SQL": "SELECT AVG(T2.UpVotes), AVG(T2.Age) FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.Id, T2.UpVotes HAVING COUNT(*) > 10", "question_toks": ["What", "is", "the", "average", "of", "the", "up", "votes", "and", "the", "average", "user", "age", "for", "users", "creating", "more", "than", "10", "posts", "?"], "SQL_toks": ["SELECT", "AVG", "(", "T2.UpVotes", ")", ",", "AVG", "(", "T2.Age", ")", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "GROUP", "BY", "T2.Id", ",", "T2.UpVotes", "HAVING", "COUNT", "(", "*", ")", ">", "10"], "evidence_toks": ["creating", "more", "than", "10", "post", "refers", "to", "Count", "(", "UserId", ")", ">", "10", ";", "up", "votes", "average", "=", "Divide", "(", "Sum", "(", "UpVotes", ")", ",", "Count", "(", "UserId", ")", ")", ";", "average", "age", "=", "Divide", "(", "Sum", "(", "Age", ")", ",", "Count", "(", "UserId", ")", ")"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'", "question_toks": ["List", "out", "the", "name", "of", "badges", "that", "users", "obtained", "on", "7/19/2010", "7:39:08", "PM", "."], "SQL_toks": ["SELECT", "Name", "FROM", "badges", "WHERE", "Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many positive comments are there on the list?", "evidence": "Positive comment refers to score > 60", "SQL": "SELECT COUNT(id) FROM comments WHERE score > 60", "question_toks": ["How", "many", "positive", "comments", "are", "there", "on", "the", "list", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "comments", "WHERE", "score", ">", "60"], "evidence_toks": ["Positive", "comment", "refers", "to", "score", ">", "60"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many posts have a score of 10 on the list?", "evidence": "score of 10 refers to Score = 10; post refers to Id", "SQL": "SELECT COUNT(id) FROM posts WHERE Score = 10", "question_toks": ["How", "many", "posts", "have", "a", "score", "of", "10", "on", "the", "list", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Score", "=", "10"], "evidence_toks": ["score", "of", "10", "refers", "to", "Score", "=", "10", ";", "post", "refers", "to", "Id"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "evidence": "", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'", "question_toks": ["What", "is", "the", "name", "of", "badge", "that", "the", "user", "whose", "display", "name", "is", "``", "Pierre", "''", "obtained", "?"], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Pierre", "'"], "evidence_toks": [], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "List out the dates that users who are located in Rochester, NY obtained their badges?", "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId", "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'", "question_toks": ["List", "out", "the", "dates", "that", "users", "who", "are", "located", "in", "Rochester", ",", "NY", "obtained", "their", "badges", "?"], "SQL_toks": ["SELECT", "T2.Date", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Location", "=", "'Rochester", ",", "NY", "'"], "evidence_toks": ["``", "Rochester", ",", "NY", "''", "is", "the", "Location", "of", "user", ";", "user", "refers", "to", "UserId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users", "evidence": "\"Teacher\" is the Name of badge; highest reputation refers to Reputation = Max(Reputation); percentage = Divide (Count(UserId where Max(Reputation)), Count(UserId)) * 100", "SQL": "SELECT CAST(SUM(IIF(`Name` = 'Teacher', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges", "question_toks": ["Among", "the", "users", "who", "obtained", "the", "``", "Teacher", "''", "badge", ",", "calculate", "their", "percentage", "of", "users"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "`", "Name", "`", "=", "'Teacher", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "FROM", "badges"], "evidence_toks": ["``", "Teacher", "''", "is", "the", "Name", "of", "badge", ";", "highest", "reputation", "refers", "to", "Reputation", "=", "Max", "(", "Reputation", ")", ";", "percentage", "=", "Divide", "(", "Count", "(", "UserId", "where", "Max", "(", "Reputation", ")", ")", ",", "Count", "(", "UserId", ")", ")", "*", "100"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.", "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100", "SQL": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'", "question_toks": ["Among", "the", "users", "who", "obtained", "the", "``", "Organizer", "''", "badges", ",", "calculate", "the", "percentage", "of", "users", "who", "are", "teenagers", "."], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "T2.Age", "BETWEEN", "13", "AND", "18", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.", "`", "Name", "`", "=", "'Organizer", "'"], "evidence_toks": ["``", "Organizer", "''", "is", "the", "Name", "of", "badge", ";", "teenager", "refers", "to", "Age", "BETWEEN", "13", "AND", "18", ";", "percentage", "=", "Divide", "(", "Count", "(", "UserId", "where", "Age", "BETWEEN", "13", "AND", "18", ")", ",", "Count", "(", "UserId", ")", ")", "*100"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33'", "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33'", "question_toks": ["What", "is", "the", "detailed", "content", "of", "the", "comment", "of", "the", "post", "which", "was", "created", "on", "7/19/2010", "7:37:33", "PM", "?"], "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.CreationDate", "=", "'2010-07-19", "19:37:33", "'"], "evidence_toks": ["detailed", "content", "of", "the", "comment", "refers", "to", "Text", ";", "created", "on", "7/19/2010", "7:37:33", "PM", "CreationDate", "=", "2010-07-19", "19:37:33", "'"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "SQL": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'", "question_toks": ["State", "the", "number", "of", "views", "of", "users", "who", "obtained", "the", "badge", "on", "7/19/2010", "7:39:08", "PM", "."], "SQL_toks": ["SELECT", "T1.Views", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What are the name of badges that users who have the lowest reputation obtained?", "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation LIMIT 1", "question_toks": ["What", "are", "the", "name", "of", "badges", "that", "users", "who", "have", "the", "lowest", "reputation", "obtained", "?"], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "ORDER", "BY", "T1.Reputation", "LIMIT", "1"], "evidence_toks": ["lowest", "reputation", "refers", "to", "Min", "(", "Reputation", ")", ";", "user", "refers", "to", "UserId"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many elders obtained the \"Supporter\" badge?", "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'", "question_toks": ["How", "many", "elders", "obtained", "the", "``", "Supporter", "''", "badge", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Age", ">", "65", "AND", "T2.Name", "=", "'Supporter", "'"], "evidence_toks": ["``", "Supporter", "''", "is", "the", "Name", "of", "badge", ";", "elders", "refers", "to", "Age", ">", "65"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the name of user with the ID of 30?", "evidence": "name of user refers to DisplayName;", "SQL": "SELECT DisplayName FROM users WHERE Id = 30", "question_toks": ["What", "is", "the", "name", "of", "user", "with", "the", "ID", "of", "30", "?"], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "30"], "evidence_toks": ["name", "of", "user", "refers", "to", "DisplayName", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many users were from New York?", "evidence": "New York refers to Location;", "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'", "question_toks": ["How", "many", "users", "were", "from", "New", "York", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Location", "=", "'New", "York", "'"], "evidence_toks": ["New", "York", "refers", "to", "Location", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Calculate the ratio of votes in 2010 and 2011.", "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;", "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes", "question_toks": ["Calculate", "the", "ratio", "of", "votes", "in", "2010", "and", "2011", "."], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2010", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "/", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'", ",", "1", ",", "0", ")", ")", "FROM", "votes"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "YEAR", "(", "CreationDate", ")", "=", "2010", ")", ",", "COUNT", "(", "Id", "where", "YEAR", "(", "CreationDate", ")", "=", "2011", ")", ")", "FROM", "votes", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many posts were created by Daniel Vassallo?", "evidence": "DisplayName = 'Daniel Vassallo';", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'", "question_toks": ["How", "many", "posts", "were", "created", "by", "Daniel", "Vassallo", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Daniel", "Vassallo", "'"], "evidence_toks": ["DisplayName", "=", "'Daniel", "Vassallo", "'", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?", "evidence": "Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1", "question_toks": ["Among", "posts", "by", "Harvey", "Motulsky", "and", "Noah", "Snyder", ",", "which", "one", "has", "higher", "popularity", "?"], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T2.PostId", "=", "T3.Id", "WHERE", "T1.DisplayName", "=", "'Harvey", "Motulsky", "'", "OR", "T1.DisplayName", "=", "'Noah", "Snyder", "'", "GROUP", "BY", "T1.DisplayName", "ORDER", "BY", "SUM", "(", "T3.ViewCount", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "MAX", "(", "SUM", "(", "ViewCount", ")", ")", "where", "DisplayName", "=", "'Harvey", "Motulsky", "'", "OR", "DisplayName", "=", "'Noah", "Snyder", "'", ";"], "difficulty": "challenging"}, {"db_id": "codebase_community", "question": "How many posts by Matt Parker have more than 100 votes?", "evidence": "more than 100 votes refer to PostId > 100; DisplayName = 'Matt Parker';", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 100", "question_toks": ["How", "many", "posts", "by", "Matt", "Parker", "have", "more", "than", "100", "votes", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T2.PostId", "=", "T3.Id", "INNER", "JOIN", "votes", "AS", "T4", "ON", "T4.PostId", "=", "T3.Id", "WHERE", "T1.DisplayName", "=", "'Matt", "Parker", "'", "GROUP", "BY", "T2.PostId", ",", "T4.Id", "HAVING", "COUNT", "(", "T4.Id", ")", ">", "100"], "evidence_toks": ["more", "than", "100", "votes", "refer", "to", "PostId", ">", "100", ";", "DisplayName", "=", "'Matt", "Parker", "'", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "State all the tags used by Mark Meckes in his posts that have more than 10 comment counts.", "evidence": "more than 10 comment counts refers to CommentCount > 10; DisplayName = 'Mark Meckes';", "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount > 10", "question_toks": ["State", "all", "the", "tags", "used", "by", "Mark", "Meckes", "in", "his", "posts", "that", "have", "more", "than", "10", "comment", "counts", "."], "SQL_toks": ["SELECT", "T3.Tags", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T3.Id", "=", "T2.PostId", "WHERE", "T1.DisplayName", "=", "'Mark", "Meckes", "'", "AND", "T3.CommentCount", ">", "10"], "evidence_toks": ["more", "than", "10", "comment", "counts", "refers", "to", "CommentCount", ">", "10", ";", "DisplayName", "=", "'Mark", "Meckes", "'", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos.", "evidence": "SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));", "SQL": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId", "question_toks": ["Calculate", "the", "difference", "in", "view", "count", "from", "post", "posted", "by", "mornington", "and", "view", "count", "from", "posts", "posted", "by", "Amos", "."], "SQL_toks": ["SELECT", "SUM", "(", "IIF", "(", "T1.DisplayName", "=", "'Mornington", "'", ",", "T3.ViewCount", ",", "0", ")", ")", "-", "SUM", "(", "IIF", "(", "T1.DisplayName", "=", "'Amos", "'", ",", "T3.ViewCount", ",", "0", ")", ")", "AS", "diff", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T3.Id", "=", "T2.PostId"], "evidence_toks": ["SUBTRACT", "(", "SUM", "(", "ViewCount", "where", "DisplayName", "=", "'Mornington", "'", ")", ",", "SUM", "(", "ViewCount", "where", "DisplayName", "=", "'Amos", "'", ")", ")", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "How many users received commentator badges in 2014?", "evidence": "commentator is the name of the badge; year(Date) = 2014;", "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'", "question_toks": ["How", "many", "users", "received", "commentator", "badges", "in", "2014", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Commentator", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2014", "'"], "evidence_toks": ["commentator", "is", "the", "name", "of", "the", "badge", ";", "year", "(", "Date", ")", "=", "2014", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "evidence": "Title = 'Detecting a given face in a database of facial images';", "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'", "question_toks": ["Provide", "the", "last", "edit", "date", "and", "last", "edit", "user", "ID", "for", "the", "post", "``", "Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "''", "."], "SQL_toks": ["SELECT", "LastEditDate", ",", "LastEditorUserId", "FROM", "posts", "WHERE", "Title", "=", "'Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "'"], "evidence_toks": ["Title", "=", "'Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "'", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Describe the post title which got positive comments and display names of the users who posted those comments.", "evidence": "positive comments refer to Score > 60;", "SQL": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60", "question_toks": ["Describe", "the", "post", "title", "which", "got", "positive", "comments", "and", "display", "names", "of", "the", "users", "who", "posted", "those", "comments", "."], "SQL_toks": ["SELECT", "T1.Title", ",", "T2.UserDisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T2.PostId", "=", "T2.Id", "WHERE", "T1.Score", ">", "60"], "evidence_toks": ["positive", "comments", "refer", "to", "Score", ">", "60", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;", "SQL": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150", "question_toks": ["Provide", "the", "users", "'", "display", "names", "and", "available", "website", "URLs", "of", "the", "post", "with", "favorite", "count", "of", "more", "than", "150", "."], "SQL_toks": ["SELECT", "T1.DisplayName", ",", "T1.WebsiteUrl", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T2.FavoriteCount", ">", "150"], "evidence_toks": ["favorite", "count", "of", "more", "than", "150", "refers", "to", "FavoriteCount", ">", "150", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Describe the last accessed date and location of the users who received the outliers badge.", "evidence": "Outliers is the name of the badge;", "SQL": "SELECT T2.LastAccessDate, T2.Location FROM badges AS T1 INNER JOIN users AS T2 ON T1.Id = T1.UserId WHERE T1.Name = 'Outliers'", "question_toks": ["Describe", "the", "last", "accessed", "date", "and", "location", "of", "the", "users", "who", "received", "the", "outliers", "badge", "."], "SQL_toks": ["SELECT", "T2.LastAccessDate", ",", "T2.Location", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.Id", "=", "T1.UserId", "WHERE", "T1.Name", "=", "'Outliers", "'"], "evidence_toks": ["Outliers", "is", "the", "name", "of", "the", "badge", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Describe the display name of the parent ID for child post with the highest score.", "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);", "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )", "question_toks": ["Describe", "the", "display", "name", "of", "the", "parent", "ID", "for", "child", "post", "with", "the", "highest", "score", "."], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "(", "SELECT", "OwnerUserId", "FROM", "posts", "WHERE", "ParentId", "IS", "NOT", "NULL", "ORDER", "BY", "Score", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["If", "the", "parent", "id", "is", "not", "null", ",", "the", "post", "is", "the", "child", "post", ";", "the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.", "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);", "SQL": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )", "question_toks": ["Under", "the", "vote", "type", "of", "8", ",", "provide", "the", "display", "names", "and", "websites", "URLs", "of", "the", "user", "who", "got", "the", "highest", "bounty", "amount", "."], "SQL_toks": ["SELECT", "DisplayName", ",", "WebsiteUrl", "FROM", "users", "WHERE", "Id", "=", "(", "SELECT", "UserId", "FROM", "votes", "WHERE", "VoteTypeId", "=", "8", "ORDER", "BY", "BountyAmount", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["vote", "type", "of", "8", "refers", "to", "VoteTypeId", "=", "8", ";", "the", "highest", "bounty", "amount", "refers", "to", "MAX", "(", "BountyAmount", ")", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "What are the titles of the top 5 posts with the highest popularity?", "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);", "SQL": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5", "question_toks": ["What", "are", "the", "titles", "of", "the", "top", "5", "posts", "with", "the", "highest", "popularity", "?"], "SQL_toks": ["SELECT", "Title", "FROM", "posts", "ORDER", "BY", "ViewCount", "DESC", "LIMIT", "5"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "highest", "popularity", "refers", "to", "MAX", "(", "ViewCount", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many tags have post count between 5,000 to 7,000?", "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;", "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000", "question_toks": ["How", "many", "tags", "have", "post", "count", "between", "5,000", "to", "7,000", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "tags", "WHERE", "Count", "BETWEEN", "5000", "AND", "7000"], "evidence_toks": ["post", "count", "between", "5,000", "to", "7,000", "refers", "to", "Count", "BETWEEN", "5000", "and", "7000", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the owner user id of the most valuable post?", "evidence": "the most valuable post refers to MAX(FavoriteCount);", "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )", "question_toks": ["What", "is", "the", "owner", "user", "id", "of", "the", "most", "valuable", "post", "?"], "SQL_toks": ["SELECT", "OwnerUserId", "FROM", "posts", "WHERE", "FavoriteCount", "=", "(", "SELECT", "MAX", "(", "FavoriteCount", ")", "FROM", "posts", ")"], "evidence_toks": ["the", "most", "valuable", "post", "refers", "to", "MAX", "(", "FavoriteCount", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the id of the youngest user?", "evidence": "the youngest user refers to MIN(Age);", "SQL": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )", "question_toks": ["What", "is", "the", "id", "of", "the", "youngest", "user", "?"], "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Age", "=", "(", "SELECT", "MIN", "(", "Age", ")", "FROM", "users", ")"], "evidence_toks": ["the", "youngest", "user", "refers", "to", "MIN", "(", "Age", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the score of the post with the most popular tag?", "evidence": "Higher view count means the post has higher popularity; the most popular tag refers to MAX(Count);", "SQL": "SELECT Score FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )", "question_toks": ["What", "is", "the", "score", "of", "the", "post", "with", "the", "most", "popular", "tag", "?"], "SQL_toks": ["SELECT", "Score", "FROM", "posts", "WHERE", "Id", "=", "(", "SELECT", "ExcerptPostId", "FROM", "tags", "ORDER", "BY", "Count", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "most", "popular", "tag", "refers", "to", "MAX", "(", "Count", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?", "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)", "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'", "question_toks": ["What", "is", "the", "average", "monthly", "number", "of", "links", "created", "in", "2010", "for", "posts", "that", "have", "no", "more", "than", "2", "answers", "?"], "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "T1.Id", ")", "AS", "REAL", ")", "/", "12", "FROM", "postLinks", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.AnswerCount", "<", "=", "2", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.CreationDate", ")", "=", "'2010", "'"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "YEAR", "(", "CreationDate", ")", "=", "2010", "and", "AnswerCount", "<", "=", "2", ")", ",", "12", ")"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Among the posts that were voted by user 14730, what is the id of the most valuable post?", "evidence": "user 14730 refers to UserId = 14730; the most valuable post refers to MAX(FavoriteCount);", "SQL": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 14730 ORDER BY T2.FavoriteCount DESC LIMIT 1", "question_toks": ["Among", "the", "posts", "that", "were", "voted", "by", "user", "14730", ",", "what", "is", "the", "id", "of", "the", "most", "valuable", "post", "?"], "SQL_toks": ["SELECT", "T2.Id", "FROM", "votes", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.UserId", "=", "14730", "ORDER", "BY", "T2.FavoriteCount", "DESC", "LIMIT", "1"], "evidence_toks": ["user", "14730", "refers", "to", "UserId", "=", "14730", ";", "the", "most", "valuable", "post", "refers", "to", "MAX", "(", "FavoriteCount", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the date when the youngest user made his or her first post?", "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);", "SQL": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T1.Age, T2.CreaionDate LIMIT 1", "question_toks": ["What", "is", "the", "date", "when", "the", "youngest", "user", "made", "his", "or", "her", "first", "post", "?"], "SQL_toks": ["SELECT", "T2.CreaionDate", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "ORDER", "BY", "T1.Age", ",", "T2.CreaionDate", "LIMIT", "1"], "evidence_toks": ["the", "youngest", "user", "refers", "to", "MIN", "(", "Age", ")", ";", "first", "post", "refers", "to", "MIN", "(", "CreaionDate", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?", "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4", "question_toks": ["Among", "the", "users", "located", "in", "United", "Kingdom", ",", "how", "many", "users", "whose", "post", "have", "a", "total", "favorite", "amount", "of", "4", "or", "more", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.Location", "=", "'United", "Kingdom", "'", "AND", "T2.FavoriteCount", ">", "=", "4"], "evidence_toks": ["favorite", "amount", "of", "4", "or", "more", "refers", "to", "FavoriteCount", ">", "=", "4", ";", "Location", "=", "'United", "Kingdom", "'", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;", "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000", "question_toks": ["How", "many", "users", "whose", "reputations", "are", "higher", "than", "2000", "and", "the", "number", "of", "views", "is", "higher", "than", "1000", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "Reputation", ">", "2000", "AND", "Views", ">", "1000"], "evidence_toks": ["reputations", "are", "higher", "than", "2000", "refer", "to", "Reputation", ">", "2000", ";", "number", "of", "views", "is", "higher", "than", "1000", "refers", "to", "Views", ">", "1000", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);", "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1", "question_toks": ["Which", "post", "by", "Harvey", "Motulsky", "has", "the", "most", "views", "?", "Please", "give", "the", "id", "and", "title", "of", "this", "post", "."], "SQL_toks": ["SELECT", "T2.Id", ",", "T2.Title", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Harvey", "Motulsky", "'", "ORDER", "BY", "T2.ViewCount", "DESC", "LIMIT", "1"], "evidence_toks": ["DisplayName", "=", "'Harvey", "Motulsky", "'", ";", "the", "most", "views", "refer", "to", "MAX", "(", "ViewCount", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the average score of Stephen Turner's posts?", "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);", "SQL": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'", "question_toks": ["What", "is", "the", "average", "score", "of", "Stephen", "Turner", "'s", "posts", "?"], "SQL_toks": ["SELECT", "AVG", "(", "T2.Score", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Stephen", "Turner", "'"], "evidence_toks": ["DisplayName", "=", "'Stephen", "Turner", "'", ";", "average", "score", "refers", "to", "AVG", "(", "Score", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Please list the users' display names whose posts had over 20000 views in 2011.", "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000", "question_toks": ["Please", "list", "the", "users", "'", "display", "names", "whose", "posts", "had", "over", "20000", "views", "in", "2011", "."], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.CreaionDate", ")", "=", "'2011", "'", "AND", "T2.ViewCount", ">", "20000"], "evidence_toks": ["had", "over", "20000", "views", "in", "2011", "refers", "to", "ViewCount", ">", "20000", "where", "YEAR", "(", "CreationDate", ")", "=", "2011", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.", "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;", "SQL": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1", "question_toks": ["Which", "is", "the", "most", "valuable", "post", "in", "2010", "?", "Please", "give", "its", "id", "and", "the", "owner", "'s", "display", "name", "."], "SQL_toks": ["SELECT", "T2.OwnerUserId", ",", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.CreationDate", ")", "=", "'2010", "'", "ORDER", "BY", "T2.FavoriteCount", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "most", "valuable", "post", "in", "2015", "refers", "to", "MAX", "(", "FavoriteCount", ")", "where", "year", "(", "CreationDate", ")", "=", "2010", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?", "evidence": "DIVIDE(COUNT(Id where CreationDate = 2011 and Reputation > 1000), COUNT(Id) ) * 100 as percentage;", "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId", "question_toks": ["What", "is", "the", "percentage", "of", "posts", "whose", "owners", "had", "a", "reputation", "of", "over", "1000", "in", "2011", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.CreaionDate", ")", "=", "'2011", "'", "AND", "T1.Reputation", ">", "1000", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "CreationDate", "=", "2011", "and", "Reputation", ">", "1000", ")", ",", "COUNT", "(", "Id", ")", ")", "*", "100", "as", "percentage", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "Identify the percentage of teenage users.", "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;", "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users", "question_toks": ["Identify", "the", "percentage", "of", "teenage", "users", "."], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Age", "BETWEEN", "13", "AND", "18", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "FROM", "users"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "Age", "BETWEEN", "13", "and", "18", ")", ",", "COUNT", "(", "Id", ")", ")", "as", "percentage", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Identify the display name and location of the user, who was the last to edit the post with ID 5465.", "evidence": "last to edit refers to MAX(LastEditDate);", "SQL": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 5465 ORDER BY T1.LastEditDate DESC LIMIT 1", "question_toks": ["Identify", "the", "display", "name", "and", "location", "of", "the", "user", ",", "who", "was", "the", "last", "to", "edit", "the", "post", "with", "ID", "5465", "."], "SQL_toks": ["SELECT", "T2.DisplayName", ",", "T2.Location", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.Id", "=", "5465", "ORDER", "BY", "T1.LastEditDate", "DESC", "LIMIT", "1"], "evidence_toks": ["last", "to", "edit", "refers", "to", "MAX", "(", "LastEditDate", ")", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.", "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';", "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'", "question_toks": ["How", "long", "did", "it", "take", "the", "user", ",", "known", "by", "his", "or", "her", "display", "name", "'Zolomon", "'", "to", "get", "the", "badge", "?", "Count", "from", "the", "date", "the", "user", "'s", "account", "was", "created", "."], "SQL_toks": ["SELECT", "T1.Date", "-", "T2.CreationDate", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Zolomon", "'"], "evidence_toks": ["SUBTRACT", "(", "Date", "from", "stats_badges", ",", "CreationDate", ")", "where", "DisplayName", "=", "'Zolomon", "'", ";"], "difficulty": "moderate"}, {"db_id": "codebase_community", "question": "How many users were awarded with 'Citizen Patrol' badge?", "evidence": "Citizen Patrol' is the name of the badge;", "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'", "question_toks": ["How", "many", "users", "were", "awarded", "with", "'Citizen", "Patrol", "'", "badge", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "badges", "WHERE", "`", "Name", "`", "=", "'Citizen", "Patrol", "'"], "evidence_toks": ["Citizen", "Patrol", "'", "is", "the", "name", "of", "the", "badge", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "evidence": "", "SQL": "SELECT COUNT(id) FROM posts WHERE Title = 'Clustering 1D data'", "question_toks": ["How", "many", "comments", "and", "answers", "were", "left", "by", "the", "users", "on", "the", "post", "with", "the", "title", "'Clustering", "1D", "data", "'", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Title", "=", "'Clustering", "1D", "data", "'"], "evidence_toks": [], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "When did the user known as 'IrishStat' create his or her account?", "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;", "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'", "question_toks": ["When", "did", "the", "user", "known", "as", "'IrishStat", "'", "create", "his", "or", "her", "account", "?"], "SQL_toks": ["SELECT", "CreationDate", "FROM", "users", "WHERE", "DisplayName", "=", "'IrishStat", "'"], "evidence_toks": ["DisplayName", "=", "'IrishStat", "'", ";", "when", "create", "his", "or", "her", "account", "refers", "to", "CreationDate", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Identify the number of posts that offer a bounty amount over 30.", "evidence": "bounty amount over 30 refers to BountyAmount > = 30;", "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30", "question_toks": ["Identify", "the", "number", "of", "posts", "that", "offer", "a", "bounty", "amount", "over", "30", "."], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "votes", "WHERE", "BountyAmount", ">", "=", "30"], "evidence_toks": ["bounty", "amount", "over", "30", "refers", "to", "BountyAmount", ">", "=", "30", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "What is the excerpt post ID and wiki post ID of the tag named sample?", "evidence": "tag named sample refers to TagName = 'sample';", "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'", "question_toks": ["What", "is", "the", "excerpt", "post", "ID", "and", "wiki", "post", "ID", "of", "the", "tag", "named", "sample", "?"], "SQL_toks": ["SELECT", "ExcerptPostId", ",", "WikiPostId", "FROM", "tags", "WHERE", "TagName", "=", "'sample", "'"], "evidence_toks": ["tag", "named", "sample", "refers", "to", "TagName", "=", "'sample", "'", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "evidence": "Text = 'fine, you win :)';", "SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'", "question_toks": ["Give", "the", "user", "'s", "reputation", "and", "up", "vote", "number", "of", "the", "user", "that", "commented", "``", "fine", ",", "you", "win", ":", ")", "''", "."], "SQL_toks": ["SELECT", "T2.Reputation", ",", "T2.UpVotes", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Text", "=", "'fine", ",", "you", "win", ":", ")", "'"], "evidence_toks": ["Text", "=", "'fine", ",", "you", "win", ":", ")", "'", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "In posts with 1 comment, how many of the comments have 0 score?", "evidence": "in posts with 1 comment refers to CommentCount = 1;", "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0", "question_toks": ["In", "posts", "with", "1", "comment", ",", "how", "many", "of", "the", "comments", "have", "0", "score", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.CommentCount", "=", "1", "AND", "T2.Score", "=", "0"], "evidence_toks": ["in", "posts", "with", "1", "comment", "refers", "to", "CommentCount", "=", "1", ";"], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "evidence": "", "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40", "question_toks": ["Among", "products", "comments", "with", "0", "score", ",", "what", "is", "the", "total", "number", "of", "users", "ages", "40", "years", "old", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Score", "=", "0", "AND", "T2.Age", "=", "40"], "evidence_toks": [], "difficulty": "simple"}, {"db_id": "codebase_community", "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "evidence": "DownVotes = 0; Score BETWEEN 1 and 5", "SQL": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0", "question_toks": ["In", "comments", "with", "score", "between", "1", "to", "5", ",", "list", "down", "the", "display", "names", "of", "the", "users", "with", "0", "down", "votes", "."], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Score", "BETWEEN", "1", "AND", "5", "AND", "T2.DownVotes", "=", "0"], "evidence_toks": ["DownVotes", "=", "0", ";", "Score", "BETWEEN", "1", "and", "5"], "difficulty": "simple"}]