[{"db_id": "codebase_community", "question": "Please list the display names of all the users whose accounts were created in the year 2014.", "evidence": "account created in the year 2014 refers to year(CreationDate) = 2014", "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'", "question_toks": ["Please", "list", "the", "display", "names", "of", "all", "the", "users", "whose", "accounts", "were", "created", "in", "the", "year", "2014", "."], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2014", "'"], "evidence_toks": ["account", "created", "in", "the", "year", "2014", "refers", "to", "year", "(", "CreationDate", ")", "=", "2014"], "difficulty": "simple", "templatized_domain_statements": ["'value that cost more converted mana for the face' refers to ORDER BY cards.faceConvertedManaCost LIMIT 1"]}, {"db_id": "codebase_community", "question": "How many users last accessed the website after 2014/9/1?", "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'", "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'", "question_toks": ["How", "many", "users", "last", "accessed", "the", "website", "after", "2014/9/1", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "date", "(", "LastAccessDate", ")", ">", "'2014-09-01", "'"], "evidence_toks": ["last", "accessed", "after", "2014/9/1", "refers", "to", "LastAccessDate", ">", "'2014-09-01", "00:00:00", "'"], "difficulty": "simple", "templatized_domain_statements": ["'frame style ranking below 100 on EDHRec' refers to cards.edhrecRank < 100", "'cards with 2015 frame style' refers to cards.frameVersion = 2015"]}, {"db_id": "codebase_community", "question": "What is the display name of the user who has the most number of views?", "evidence": "user who has the most number of view refers to Max(Views)", "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "has", "the", "most", "number", "of", "views", "?"], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["user", "who", "has", "the", "most", "number", "of", "view", "refers", "to", "Max", "(", "Views", ")"], "difficulty": "simple", "templatized_domain_statements": ["'cards have missing or degraded properties and values' refers to cards.hasContentWarning = 1", "'illustrated by Stephen Daniel' refers to cards.artist = 'Stephen Daniel'"]}, {"db_id": "codebase_community", "question": "How many posts does the user csgillespie own?", "evidence": "\"csgillespie\" is the DisplayName of user", "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["How", "many", "posts", "does", "the", "user", "csgillespie", "own", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "difficulty": "simple", "templatized_domain_statements": ["'card named 'Sublime Epiphany' with number 74s' refers to cards.name = 'Sublime Epiphany' AND cards.number = '74'", "'number 74s' refers to cards.number = '74s'", "'information about rulings' refers to rulings.text"]}, {"db_id": "codebase_community", "question": "Please list the titles of the posts owned by the user csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user", "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["Please", "list", "the", "titles", "of", "the", "posts", "owned", "by", "the", "user", "csgillespie", "?"], "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "difficulty": "simple", "templatized_domain_statements": ["'artist with the most ruling information' refers to ORDER BY COUNT(DISTINCT cards.uuid) DESC LIMIT 1", "'the card is a promotional printing' refers to cards.isPromo = 1"]}, {"db_id": "codebase_community", "question": "Who is the owner of the post \"Eliciting priors from experts\"?", "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName", "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'", "question_toks": ["Who", "is", "the", "owner", "of", "the", "post", "``", "Eliciting", "priors", "from", "experts", "''", "?"], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Eliciting", "priors", "FROM", "experts", "'"], "evidence_toks": ["``", "Eliciting", "priors", "from", "experts", "''", "is", "the", "Title", "of", "post", ";", "owner", "refers", "to", "DisplayName"], "difficulty": "simple", "templatized_domain_statements": ["'alternative language in Japanese' refers to foreign_data.language = 'Japanese'"]}, {"db_id": "codebase_community", "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)", "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1", "question_toks": ["What", "is", "the", "title", "of", "the", "post", "that", "is", "owned", "by", "csgillespie", "and", "has", "the", "highest", "popularity", "?"], "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'", "ORDER", "BY", "T1.ViewCount", "DESC", "LIMIT", "1"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "highest", "popularity", "refers", "to", "Max", "(", "ViewCount", ")"], "difficulty": "simple", "templatized_domain_statements": ["'cards availabe in Chinese Simplified' refers to foreign_data.language = 'Chinese Simplified'", "'percentage of the cards availabe in Chinese Simplified' refers to CAST(SUM(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id)"]}, {"db_id": "codebase_community", "question": "What is the total number of comments of all the posts owned by csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)", "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["What", "is", "the", "total", "number", "of", "comments", "of", "all", "the", "posts", "owned", "by", "csgillespie", "?"], "SQL_toks": ["SELECT", "SUM", "(", "T1.CommentCount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "total", "number", "of", "comments", "refers", "to", "Sum", "(", "CommentCount", ")"], "difficulty": "simple", "templatized_domain_statements": ["'keyword found on card 'Angel of Mercy'' refers to cards.keywords WHERE cards.name = 'Angel of Mercy'"]}, {"db_id": "codebase_community", "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId", "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does NOT mean causation'", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "last", "edited", "the", "post", "``", "Examples", "for", "teaching", ":", "Correlation", "does", "not", "mean", "causation", "''", "?"], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Examples", "for", "teaching", ":", "Correlation", "does", "NOT", "mean", "causation", "'"], "evidence_toks": ["``", "Examples", "for", "teaching", ":", "Correlation", "does", "not", "mean", "causation", "''", "is", "the", "Title", "of", "post", ";", "user", "who", "last", "edited", "refers", "to", "LastEditorUserId"], "difficulty": "moderate", "templatized_domain_statements": ["'type of promotion' refers to promoTypes", "'type of promotion' refers to cards.promoTypes"]}, {"db_id": "codebase_community", "question": "How many badges has the user csgillespie obtained?", "evidence": "\"csgillespie\" is the DisplayName of user", "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["How", "many", "badges", "has", "the", "user", "csgillespie", "obtained", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "difficulty": "simple", "templatized_domain_statements": ["'border color of card \"Ancestor's Chosen\"' refers to cards.borderColor WHERE cards.name = \"Ancestor's Chosen\""]}, {"db_id": "codebase_community", "question": "What is the display name of the user who has obtained the most number of badges?", "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))", "SQL": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "has", "obtained", "the", "most", "number", "of", "badges", "?"], "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "GROUP", "BY", "T2.DisplayName", "ORDER", "BY", "COUNT", "(", "T1.Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["who", "obtained", "the", "most", "number", "of", "badges", "refers", "to", "UserID", "with", "Max", "(", "Count", "(", "Id", ")", ")"], "difficulty": "simple", "templatized_domain_statements": ["'the set that card 'Angel of Mercy' is in' refers to set_translations.name = 'Angel of Mercy'"]}, {"db_id": "codebase_community", "question": "What is the average score of the posts owned by the user csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)", "SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "question_toks": ["What", "is", "the", "average", "score", "of", "the", "posts", "owned", "by", "the", "user", "csgillespie", "?"], "SQL_toks": ["SELECT", "AVG", "(", "T1.Score", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "average", "score", "refers", "to", "AVG", "(", "Score", ")"], "difficulty": "simple", "templatized_domain_statements": ["'legalities whose status is restricted' refers to legalities.status = 'Restricted'", "'cards of legalities whose status is restricted have text boxes' refers to legalities.status = 'Restricted' AND cards.isTextless = 0"]}, {"db_id": "codebase_community", "question": "What is the average number of badges obtained by a user with over 200 views?", "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))", "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200", "question_toks": ["What", "is", "the", "average", "number", "of", "badges", "obtained", "by", "a", "user", "with", "over", "200", "views", "?"], "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "T1.Id", ")", "AS", "REAL", ")", "/", "COUNT", "(", "DISTINCT", "T2.DisplayName", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.Views", ">", "200"], "evidence_toks": ["user", "with", "over", "200", "views", "refers", "to", "Views", ">", "200", ";", "average", "number", "of", "badges", "=", "Divide", "(", "Count", "(", "Id", ")", ",", "Count", "(", "DisplayName", ")", ")"], "difficulty": "simple", "templatized_domain_statements": ["'of card \"Cloudchaser Eagle\"' refers to cards.name = 'Cloudchaser Eagle'"]}, {"db_id": "codebase_community", "question": "How many votes did the user No.58 take on 2010/7/19?", "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'", "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'", "question_toks": ["How", "many", "votes", "did", "the", "user", "No.58", "take", "on", "2010/7/19", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "votes", "WHERE", "UserId", "=", "58", "AND", "CreationDate", "=", "'2010-07-19", "'"], "evidence_toks": ["user", "no", ".", "58", "refers", "to", "UserId", "=", "58", ";", "on", "2010/7/19", "refers", "to", "CreationDate", "=", "'2010-07-19", "'"], "difficulty": "simple", "templatized_domain_statements": ["'the type of card \"Benalish Knight\"' refers to cards.type"]}, {"db_id": "codebase_community", "question": "Give the number of \"Revival\" badges.", "evidence": "number refers to Id; 'Revival' is the Name of badge", "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'", "question_toks": ["Give", "the", "number", "of", "``", "Revival", "''", "badges", "."], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Revival", "'"], "evidence_toks": ["number", "refers", "to", "Id", ";", "'Revival", "'", "is", "the", "Name", "of", "badge"], "difficulty": "simple", "templatized_domain_statements": ["'playing card \"Benalish Knight\"' refers to cards.name = 'Benalish Knight'", "'rule of playing card' refers to legalities.format"]}, {"db_id": "codebase_community", "question": "What is the title for the post which got the highest score comment?", "evidence": "highest score comment refers to Max(comments.Score)", "SQL": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )", "question_toks": ["What", "is", "the", "title", "for", "the", "post", "which", "got", "the", "highest", "score", "comment", "?"], "SQL_toks": ["SELECT", "Title", "FROM", "posts", "WHERE", "Id", "=", "(", "SELECT", "PostId", "FROM", "comments", "ORDER", "BY", "Score", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["highest", "score", "comment", "refers", "to", "Max", "(", "comments.Score", ")"], "difficulty": "simple", "templatized_domain_statements": ["'illustrated the card art in Phyrexian' refers to foreign_data.language = 'Phyrexian'", "'names of the artists who illustrated the card art in Phyrexian' refers to cards.artist"]}, {"db_id": "codebase_community", "question": "For the post which got 1910 view counts, how many comments does it get?", "evidence": "", "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910", "question_toks": ["For", "the", "post", "which", "got", "1910", "view", "counts", ",", "how", "many", "comments", "does", "it", "get", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.ViewCount", "=", "1910"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'illustrated in German' refers to foreign_data.language = 'German'", "'reprinted' refers to cards.isReprint = 1"]}, {"db_id": "codebase_community", "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39'", "SQL": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39' AND T2.UserId = 3025", "question_toks": ["User", "No.3025", "gave", "a", "comment", "at", "20:29:39", "on", "2014/4/23", "to", "a", "post", ",", "how", "many", "favorite", "counts", "did", "that", "post", "get", "?"], "SQL_toks": ["SELECT", "T1.FavoriteCount", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T2.CreationDate", "=", "'2014-04-23", "20:29:39", "'", "AND", "T2.UserId", "=", "3025"], "evidence_toks": ["user", "no", ".", "3025", "refers", "to", "UserId", "=", "'3025", "'", ";", "comment", "at", "20:29:39", "on", "2014/4/23", "refers", "to", "CreationDate", "=", "'2014/4/23", "20:29:39", "'"], "difficulty": "moderate", "templatized_domain_statements": ["'borderless cards' refers to cards.borderColor = 'borderless'", "'illustrated in Russian' refers to foreign_data.language = 'Russian'"]}, {"db_id": "codebase_community", "question": "For the owner user of post No. 65041, what is his/her reputation points?", "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation", "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041", "question_toks": ["For", "the", "owner", "user", "of", "post", "No", ".", "65041", ",", "what", "is", "his/her", "reputation", "points", "?"], "SQL_toks": ["SELECT", "T1.Reputation", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T2.Id", "=", "65041"], "evidence_toks": ["post", "no", ".", "65041", "refers", "to", "Id", "=", "'65041", "'", ";", "reputation", "point", "refers", "to", "Reputation"], "difficulty": "simple", "templatized_domain_statements": ["'cards with toughness of (100)' refers to cards.toughness = 100"]}, {"db_id": "codebase_community", "question": "Give the number of votes for the post about data visualization.", "evidence": "About data visualization is the Title that contains 'data visualization';", "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'", "question_toks": ["Give", "the", "number", "of", "votes", "for", "the", "post", "about", "data", "visualization", "."], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "LIKE", "'", "%", "data", "visualization", "%", "'"], "evidence_toks": ["About", "data", "visualization", "is", "the", "Title", "that", "contains", "'data", "visualization", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'black border cards' refers to cards.borderColor = 'black'", "'available on mtgo' refers to cards.availability = 'mtgo'", "'only available on mtgo' refers to cards.availability = 'mtgo'"]}, {"db_id": "codebase_community", "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?", "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount", "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "question_toks": ["How", "many", "views", "did", "the", "post", "titled", "'Integration", "of", "Weka", "and/or", "RapidMiner", "into", "Informatica", "PowerCenter/Developer", "'", "get", "?"], "SQL_toks": ["SELECT", "ViewCount", "FROM", "posts", "WHERE", "Title", "=", "'Integration", "of", "Weka", "and/or", "RapidMiner", "into", "Informatica", "PowerCenter/Developer", "'"], "evidence_toks": ["``", "Integration", "of", "Weka", "and/or", "RapidMiner", "into", "Informatica", "PowerCenter/Developer", "''", "is", "the", "Title", "of", "post", ";", "views", "refers", "to", "ViewCount"], "difficulty": "moderate", "templatized_domain_statements": ["'converted mana cost of (100)' refers to cards.convertedManaCost = 100"]}, {"db_id": "codebase_community", "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "evidence": "\"How does gentle boosing differ from AdaBoost?\" is the Title of post; comments refers to Text", "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ FROM AdaBoost?'", "question_toks": ["Write", "all", "comments", "made", "on", "the", "post", "titled", "'How", "does", "gentle", "boosting", "differ", "from", "AdaBoost", "?", "'"], "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'How", "does", "gentle", "boosting", "differ", "FROM", "AdaBoost", "?", "'"], "evidence_toks": ["``", "How", "does", "gentle", "boosing", "differ", "from", "AdaBoost", "?", "''", "is", "the", "Title", "of", "post", ";", "comments", "refers", "to", "Text"], "difficulty": "simple", "templatized_domain_statements": ["'have subtype other than \"Angel\"' refers to cards.subtypes != 'Angel'"]}, {"db_id": "codebase_community", "question": "Name 10 users with the badge name 'Necromancer.'", "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10", "question_toks": ["Name", "10", "users", "with", "the", "badge", "name", "'Necromancer", ".", "'"], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Name", "=", "'Necromancer", "'", "LIMIT", "10"], "evidence_toks": ["``", "Necromancer", "''", "is", "the", "Name", "of", "badge", ";", "users", "refers", "to", "DisplayName"], "difficulty": "simple", "templatized_domain_statements": ["'cards that only available in paper' refers to cards.availability = 'paper'", "'only available in paper and Japanese language' refers to cards.availability = 'paper' AND foreign_data.language = 'Japanese'"]}, {"db_id": "codebase_community", "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId", "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl", "question_toks": ["What", "is", "the", "total", "score", "of", "the", "posts", "edited", "by", "Yevgeny", "and", "include", "the", "user", "'s", "website", "URL", "."], "SQL_toks": ["SELECT", "SUM", "(", "T1.Score", ")", ",", "T2.WebsiteUrl", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Yevgeny", "'", "GROUP", "BY", "T2.WebsiteUrl"], "evidence_toks": ["``", "Yevgeny", "''", "is", "the", "DisplayName", ";", "edited", "refers", "to", "LastEditorUserId"], "difficulty": "simple", "templatized_domain_statements": ["'cards in set 10E' refers to set_translations.setCode = '10E'", "'cards in set 10E with converted mana of (100) have translation' refers to cards.convertedManaCost = 100 AND set_translations.setCode = '10E'"]}, {"db_id": "codebase_community", "question": "How much is the total bounty amount of the post titled about 'data'", "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)", "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'", "question_toks": ["How", "much", "is", "the", "total", "bounty", "amount", "of", "the", "post", "titled", "about", "'data", "'"], "SQL_toks": ["SELECT", "SUM", "(", "T2.BountyAmount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "LIKE", "'", "%", "data", "%", "'"], "evidence_toks": ["About", "data", "means", "the", "title", "contains", "'data", "'", ";", "total", "bounty", "Amount", "refers", "to", "Sum", "(", "BountyAmount", ")"], "difficulty": "simple", "templatized_domain_statements": ["'name of cards with original types of Creature - Elf' refers to cards.originalType = 'Creature - Elf'"]}, {"db_id": "codebase_community", "question": "Which user added a bounty amount of 50 to the post titled 'Variance of a difference in marginal proportions in a three-way contingency table?'", "evidence": "\"Variance of a difference in marginal proportions in a three-way contingency table\" is the Title of post; bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName", "SQL": "SELECT T3.DisplayName FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title = 'Variance of a difference in marginal proportions in a three-way contingency table'", "question_toks": ["Which", "user", "added", "a", "bounty", "amount", "of", "50", "to", "the", "post", "titled", "'Variance", "of", "a", "difference", "in", "marginal", "proportions", "in", "a", "three-way", "contingency", "table", "?", "'"], "SQL_toks": ["SELECT", "T3.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "INNER", "JOIN", "users", "AS", "T3", "ON", "T3.Id", "=", "T2.UserId", "WHERE", "T2.BountyAmount", "=", "50", "AND", "T1.Title", "=", "'Variance", "of", "a", "difference", "in", "marginal", "proportions", "in", "a", "three-way", "contingency", "table", "'"], "evidence_toks": ["``", "Variance", "of", "a", "difference", "in", "marginal", "proportions", "in", "a", "three-way", "contingency", "table", "''", "is", "the", "Title", "of", "post", ";", "bounty", "amount", "of", "50", "refers", "to", "BountyAmount", "=", "50", ";", "user", "refers", "to", "DisplayName"], "difficulty": "challenging", "templatized_domain_statements": ["'cards from ID 1-20' refers to cards.id BETWEEN 1 AND 20"]}, {"db_id": "codebase_community", "question": "Give the total number of comments posted by user ID 13.", "evidence": "", "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13", "question_toks": ["Give", "the", "total", "number", "of", "comments", "posted", "by", "user", "ID", "13", "."], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "comments", "WHERE", "UserId", "=", "13"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'Among the Artifact cards' refers to cards.originalType = 'Artifact'", "'black color' refers to cards.colors = 'B'", "'comes with foreign language translation' refers to cards.uuid = foreign_data.uuid"]}, {"db_id": "codebase_community", "question": "How many users are awarded with supporter badge during year 2011?", "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011", "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'", "question_toks": ["How", "many", "users", "are", "awarded", "with", "supporter", "badge", "during", "year", "2011", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2011", "'", "AND", "Name", "=", "'Supporter", "'"], "evidence_toks": ["``", "Supporter", "''", "is", "the", "Name", "of", "badge", ";", "in", "year", "2011", "refers", "to", "year", "(", "Date", ")", "=", "2011"], "difficulty": "simple", "templatized_domain_statements": ["'cards with rarity of uncommon' refers to cards.rarity = 'uncommon'"]}, {"db_id": "codebase_community", "question": "How many users are awarded with more than 5 badges?", "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId", "SQL": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5", "question_toks": ["How", "many", "users", "are", "awarded", "with", "more", "than", "5", "badges", "?"], "SQL_toks": ["SELECT", "UserId", "FROM", "(", "SELECT", "UserId", ",", "COUNT", "(", "Name", ")", "AS", "num", "FROM", "badges", "GROUP", "BY", "UserId", ")", "T", "WHERE", "T.num", ">", "5"], "evidence_toks": ["more", "than", "5", "badges", "refers", "to", "Count", "(", "Name", ")", ">", "5", ";", "user", "refers", "to", "UserId"], "difficulty": "simple", "templatized_domain_statements": ["'cards designed by Volcan Ba\u00c7\u00b5a' refers to cards.artist = 'Volcan Ba\u00c7\u00b5a'", "'foil non-powerful' refers to cards.cardKingdomId IS NULL AND cards.cardKingdomFoilId IS NULL"]}, {"db_id": "codebase_community", "question": "Which users have posted the most comments. List out the user's badge?", "evidence": "user with the most comments refers to UserId where Max(Count(Id)", "SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1", "question_toks": ["Which", "users", "have", "posted", "the", "most", "comments", ".", "List", "out", "the", "user", "'s", "badge", "?"], "SQL_toks": ["SELECT", "Name", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.UserId", "=", "t2.UserId", "GROUP", "BY", "T2.UserId", "ORDER", "BY", "COUNT", "(", "T2.UserId", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["user", "with", "the", "most", "comments", "refers", "to", "UserId", "where", "Max", "(", "Count", "(", "Id", ")"], "difficulty": "simple", "templatized_domain_statements": ["'cards designed by UDON' refers to cards.artist = 'UDON'", "'available in mtgo print type' refers to cards.availability = 'mtgo'", "'cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1' refers to cards.hand = -1 AND cards.artist = 'UDON' AND cards.Availability = 'print' AND cards.type = 'mtgo'"]}, {"db_id": "codebase_community", "question": "What are the post history type IDs for post ID 3720 and how many users have commented on the post?", "evidence": "", "SQL": "SELECT T1.PostHistoryTypeId, COUNT(T2.UserId) FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId WHERE T1.PostId = 3720", "question_toks": ["What", "are", "the", "post", "history", "type", "IDs", "for", "post", "ID", "3720", "and", "how", "many", "users", "have", "commented", "on", "the", "post", "?"], "SQL_toks": ["SELECT", "T1.PostHistoryTypeId", ",", "COUNT", "(", "T2.UserId", ")", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.UserId", "=", "T2.UserId", "WHERE", "T1.PostId", "=", "3720"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'have a sensitive content warning' refers to cards.hasContentWarning = 1", "'available on paper' refers to cards.availability = 'paper'", "'1993 frame version' refers to cards.frameVersion = 1993"]}, {"db_id": "codebase_community", "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount", "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "question_toks": ["List", "out", "all", "post", "that", "are", "related", "to", "post", "ID", "61217", "and", "what", "is", "the", "popularity", "of", "this", "post", "?"], "SQL_toks": ["SELECT", "T1.ViewCount", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T2.PostId", "=", "61217"], "evidence_toks": ["post", "related", "refers", "to", "RelatedPostId", ";", "popularity", "refers", "to", "ViewCount"], "difficulty": "simple", "templatized_domain_statements": ["'unconverted mana' refers to cards.manaCost", "'all the cards created by Rob Alexander' refers to cards.artist = 'Rob Alexander'"]}, {"db_id": "codebase_community", "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "evidence": "score more than 60 refers to Score > 60", "SQL": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )", "question_toks": ["List", "out", "all", "post", "ID", "with", "score", "more", "than", "60", "and", "list", "out", "all", "the", "user", "ID", "that", "created", "these", "post", "."], "SQL_toks": ["SELECT", "PostId", ",", "UserId", "FROM", "postHistory", "WHERE", "PostId", "IN", "(", "SELECT", "Id", "FROM", "posts", "WHERE", "Score", ">", "60", ")"], "evidence_toks": ["score", "more", "than", "60", "refers", "to", "Score", ">", "60"], "difficulty": "simple", "templatized_domain_statements": ["'cards translated into Spanish' refers to set_translations.language = 'Spanish'", "'Lists the set code of all cards' refers to set_translations.setCode"]}, {"db_id": "codebase_community", "question": "What is the sum of favourite count gained by user ID 686 in 2011?", "evidence": "in 2011 refers to year (CreatinDate) = 2011", "SQL": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )", "question_toks": ["What", "is", "the", "sum", "of", "favourite", "count", "gained", "by", "user", "ID", "686", "in", "2011", "?"], "SQL_toks": ["SELECT", "SUM", "(", "DISTINCT", "FavoriteCount", ")", "FROM", "posts", "WHERE", "Id", "IN", "(", "SELECT", "PostId", "FROM", "postHistory", "WHERE", "UserId", "=", "686", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'", ")"], "evidence_toks": ["in", "2011", "refers", "to", "year", "(", "CreatinDate", ")", "=", "2011"], "difficulty": "simple", "templatized_domain_statements": ["'maximum starting maximum hand size of +3' refers to cards.hand = '+3'", "'legendary frame effect cards' refers to cards.frameEffects = 'legendary'", "'percentage of legendary frame effect cards have a maximum starting maximum hand size of +3' refers to SUM(CASE WHEN cards.hand = '+3' THEN 1.0 ELSE 0 END) / COUNT(cards.id) * 100 WHERE cards.frameEffects = 'legendary'"]}, {"db_id": "codebase_community", "question": "How many users obtained the \"Announcer\" badge?", "evidence": "\"Announcer\" is the Name of badge; user refers to UserId", "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'", "question_toks": ["How", "many", "users", "obtained", "the", "``", "Announcer", "''", "badge", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Announcer", "'"], "evidence_toks": ["``", "Announcer", "''", "is", "the", "Name", "of", "badge", ";", "user", "refers", "to", "UserId"], "difficulty": "simple", "templatized_domain_statements": ["'Story Spotlight cards that also have a text box' refers to cards.isStorySpotlight = 1 and cards.isTextless = 0", "'percentage of Story Spotlight cards that also have a text box' refers to CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id)"]}, {"db_id": "codebase_community", "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:39:08 PM refers to CreationDate = '2010-07-19 19:25:47'", "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'", "question_toks": ["State", "the", "detailed", "content", "of", "the", "comment", "which", "was", "created", "on", "7/19/2010", "7:25:47", "PM", "."], "SQL_toks": ["SELECT", "Text", "FROM", "comments", "WHERE", "CreationDate", "=", "'2010-07-19", "19:25:47", "'"], "evidence_toks": ["detailed", "content", "of", "the", "comment", "refers", "to", "Text", ";", "created", "on", "7/19/2010", "7:39:08", "PM", "refers", "to", "CreationDate", "=", "'2010-07-19", "19:25:47", "'"], "difficulty": "simple", "templatized_domain_statements": ["'cards in Spanish' refers to foreign_data.language = 'Spanish'", "'percentage of cards in Spanish' refers to (SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100 / COUNT(*))"]}, {"db_id": "codebase_community", "question": "What are the names of badges that users who have the highest reputation obtained?", "evidence": "highest reputation refers to Max(Reputation); user refers to UserId", "SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1", "question_toks": ["What", "are", "the", "names", "of", "badges", "that", "users", "who", "have", "the", "highest", "reputation", "obtained", "?"], "SQL_toks": ["SELECT", "T2.name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "ORDER", "BY", "T1.Reputation", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")", ";", "user", "refers", "to", "UserId"], "difficulty": "simple", "templatized_domain_statements": ["inside the Commander block' refers to sets.block = 'Commander'", "'sets are inside' refers to set_translations.setCode", "'Brazilian Portuguese translated sets' refers to set_translations.language = 'Portuguese (Brazil)'"]}, {"db_id": "codebase_community", "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'", "question_toks": ["Mention", "the", "reputation", "of", "users", "who", "had", "obtained", "the", "badge", "on", "7/19/2010", "7:39:08", "PM", "."], "SQL_toks": ["SELECT", "T1.Reputation", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "difficulty": "simple", "templatized_domain_statements": ["'null power cards' refers to cards.power IS NULL", "'If you have two Lords of the Pit, you can sacrifice them to each other' ruling text refers to rulings.text"]}, {"db_id": "codebase_community", "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:14:43 PM", "evidence": "created on 7/19/2010 7:14:43 PM refers to CreationDate = '2010-07-19 19:14:43'", "SQL": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:14:43'", "question_toks": ["What", "is", "the", "comment", "'s", "rating", "score", "of", "the", "post", "which", "was", "created", "on", "7/19/2010", "7:14:43", "PM"], "SQL_toks": ["SELECT", "T1.Score", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.CreationDate", "=", "'2010-07-19", "19:14:43", "'"], "evidence_toks": ["created", "on", "7/19/2010", "7:14:43", "PM", "refers", "to", "CreationDate", "=", "'2010-07-19", "19:14:43", "'"], "difficulty": "simple", "templatized_domain_statements": ["'cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces' refers to cards.Side IS NULL"]}, {"db_id": "codebase_community", "question": "List out the age of users who located in Vienna, Austria obtained the badge?", "evidence": "\"Vienna, Austria\" is the Location", "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'", "question_toks": ["List", "out", "the", "age", "of", "users", "who", "located", "in", "Vienna", ",", "Austria", "obtained", "the", "badge", "?"], "SQL_toks": ["SELECT", "T1.Age", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Location", "=", "'Vienna", ",", "Austria", "'"], "evidence_toks": ["``", "Vienna", ",", "Austria", "''", "is", "the", "Location"], "difficulty": "simple", "templatized_domain_statements": ["'the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\"' refers to foreign_data.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'"]}, {"db_id": "codebase_community", "question": "How many adults who obtained the badge Supporter?", "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65", "question_toks": ["How", "many", "adults", "who", "obtained", "the", "badge", "Supporter", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Name", "=", "'Supporter", "'", "AND", "T1.Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["Supporter", "is", "the", "Name", "of", "badge", ";", "adult", "refers", "to", "Age", "BETWEEN", "19", "AND", "65"], "difficulty": "simple", "templatized_domain_statements": ["'foreign name of the card in French' refers to foreign_data.language = 'French'", "'black border color' refers to cards.borderColor = 'black'"]}, {"db_id": "codebase_community", "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'", "question_toks": ["State", "the", "name", "of", "badge", "that", "the", "user", "whose", "display", "name", "is", "``", "Sharpie", "''", "obtained", "."], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Sharpie", "'"], "evidence_toks": ["``", "Sharpie", "''", "is", "the", "DisplayName", "of", "user", ";", "user", "refers", "to", "UserId"], "difficulty": "simple", "templatized_domain_statements": ["'cards without power are in French' refers to foreign_data.language = 'French'", "'cards without power' refers to cards.power IS NULL OR cards.power LIKE '%*%'", "'percentage of cards without power are in French' refers to CAST(SUM(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) WHERE cards.power IS NULL OR cards.power LIKE '%*%'"]}, {"db_id": "codebase_community", "question": "How many votes were made in 2010?", "evidence": "YEAR(CreationDate) = 2010;", "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'", "question_toks": ["How", "many", "votes", "were", "made", "in", "2010", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "votes", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2010", "'"], "evidence_toks": ["YEAR", "(", "CreationDate", ")", "=", "2010", ";"], "difficulty": "simple", "templatized_domain_statements": ["'Japanese translated sets' refers to set_translations.language = 'Japanese'", "'Japanese translated sets are expansion sets' refers to sets.type = 'expansion'", "'percentage of Japanese translated sets' refers to CAST(SUM(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(sets.id)"]}, {"db_id": "codebase_community", "question": "How many users were adult?", "evidence": "adult refers to user where Age BETWEEN 19 and 65;", "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65", "question_toks": ["How", "many", "users", "were", "adult", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["adult", "refers", "to", "user", "where", "Age", "BETWEEN", "19", "and", "65", ";"], "difficulty": "simple", "templatized_domain_statements": ["'kind of printing' refers to cards.availability", "'printing is on the card that Daren Bader created' refers to cards.artist = 'Daren Bader'"]}, {"db_id": "codebase_community", "question": "Which users have the highest number of views?", "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);", "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "question_toks": ["Which", "users", "have", "the", "highest", "number", "of", "views", "?"], "SQL_toks": ["SELECT", "Id", ",", "DisplayName", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["users", "have", "the", "highest", "number", "of", "views", "refer", "to", "DisplayName", "where", "MAX", "(", "Views", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'are oversized' refers to cards.isOversized = 1", "'reprinted' refers to cards.isReprint = 1", "'printed for promotions' refers to cards.isPromo = 1"]}, {"db_id": "codebase_community", "question": "What is the name of tags used by John Stauffer's?", "evidence": "DisplayName = 'John Stauffer';", "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Stauffer'", "question_toks": ["What", "is", "the", "name", "of", "tags", "used", "by", "John", "Stauffer", "'s", "?"], "SQL_toks": ["SELECT", "T3.Tags", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T2.PostId", "=", "T3.Id", "WHERE", "T1.DisplayName", "=", "'John", "Stauffer", "'"], "evidence_toks": ["DisplayName", "=", "'John", "Stauffer", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'unknown power cards' refers to cards.power IS NULL OR cards.power = '*'", "'promotional types for arena league' refers to cards.promoTypes = 'arenaleague'"]}, {"db_id": "codebase_community", "question": "How many votes were made by Harlan?", "evidence": "DisplayName = 'Harlan';", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'", "question_toks": ["How", "many", "votes", "were", "made", "by", "Harlan", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "votes", "AS", "T3", "ON", "T3.PostId", "=", "T2.PostId", "WHERE", "T1.DisplayName", "=", "'Harlan", "'"], "evidence_toks": ["DisplayName", "=", "'Harlan", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the card with the multiverse number (100)' refers to foreign_data.multiverseid = 100"]}, {"db_id": "codebase_community", "question": "Which post by slashnick has the most answers count? State the post ID.", "evidence": "most answers count refers to MAX(AnswerCount); DisplayName = 'slashnick';", "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1", "question_toks": ["Which", "post", "by", "slashnick", "has", "the", "most", "answers", "count", "?", "State", "the", "post", "ID", "."], "SQL_toks": ["SELECT", "T2.PostId", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T2.PostId", "=", "T3.Id", "WHERE", "T1.DisplayName", "=", "'slashnick", "'", "ORDER", "BY", "T3.AnswerCount", "DESC", "LIMIT", "1"], "evidence_toks": ["most", "answers", "count", "refers", "to", "MAX", "(", "AnswerCount", ")", ";", "DisplayName", "=", "'slashnick", "'", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'don't appear in Magic: The Gathering Online' refers to sets.mtgoCode IS NULL"]}, {"db_id": "codebase_community", "question": "How many negative comments did Neil McGuigan get in his posts?", "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T2.PostId = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.score < 60", "question_toks": ["How", "many", "negative", "comments", "did", "Neil", "McGuigan", "get", "in", "his", "posts", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "postHistory", "AS", "T3", "ON", "T2.PostId", "=", "T3.PostId", "WHERE", "T1.DisplayName", "=", "'Neil", "McGuigan", "'", "AND", "T2.score", "<", "60"], "evidence_toks": ["Negative", "comment", "refers", "to", "score", "<", "60", ";", "DisplayName", "=", "'Neil", "McGuigan", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'set number (100)' refers to set_translations.id = 100"]}, {"db_id": "codebase_community", "question": "List all the name of users that obtained the Organizer Badges.", "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'", "question_toks": ["List", "all", "the", "name", "of", "users", "that", "obtained", "the", "Organizer", "Badges", "."], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.", "`", "Name", "`", "=", "'Organizer", "'"], "evidence_toks": ["name", "of", "users", "refers", "to", "DisplayName", ";", "the", "Organizer", "Badges", "refer", "to", "badges", "where", "Name", "=", "'Organizer", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'Italian-language cards' refers to set_translations.language = 'Italian'"]}, {"db_id": "codebase_community", "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.", "evidence": "DIVIDE(COUNT(PostId WHERE DisplayName = 'Community' and R language)), (COUNT(PostId WHERE DisplayName = 'Jay Stevens')) as percentage; R language refers to tagname = 'r'", "SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'", "question_toks": ["Based", "on", "posts", "posted", "by", "Community", ",", "calculate", "the", "percentage", "of", "posts", "that", "use", "the", "R", "language", "."], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "T3.TagName", "=", "'", "r", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "tags", "AS", "T3", "ON", "T3.ExcerptPostId", "=", "T2.PostId", "WHERE", "T1.DisplayName", "=", "'Community", "'"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "PostId", "WHERE", "DisplayName", "=", "'Community", "'", "and", "R", "language", ")", ")", ",", "(", "COUNT", "(", "PostId", "WHERE", "DisplayName", "=", "'Jay", "Stevens", "'", ")", ")", "as", "percentage", ";", "R", "language", "refers", "to", "tagname", "=", "'", "r", "'"], "difficulty": "challenging", "templatized_domain_statements": ["'available outside of the United States' refers to sets.isForeignOnly = 1", "'has foil cards' refers to sets.isFoilOnly = 1", "'with Japanese writing on them' refers to set_translations.language = 'Japanese'"]}, {"db_id": "codebase_community", "question": "How many posts were created on 21st July, 2010?", "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';", "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'", "question_toks": ["How", "many", "posts", "were", "created", "on", "21st", "July", ",", "2010", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "postHistory", "WHERE", "date", "(", "CreationDate", ")", "=", "'2010-07-21", "'"], "evidence_toks": ["created", "on", "21st", "July", ",", "2010", "refers", "to", "CreationDate", "BETWEEN", "'2010-07-21", "00:00:00", "'", "and", "'2012-07-21", "23:59:59", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'just in Japanese' refers to set_translations.language = 'Japanese'", "'not in Magic: The Gathering Online' refers to sets.mtgoCode IS NULL"]}, {"db_id": "codebase_community", "question": "What are the display names and ages of user who got the highest in views?", "evidence": "the highest in views refers to MAX(Views);", "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "question_toks": ["What", "are", "the", "display", "names", "and", "ages", "of", "user", "who", "got", "the", "highest", "in", "views", "?"], "SQL_toks": ["SELECT", "DisplayName", ",", "Age", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["the", "highest", "in", "views", "refers", "to", "MAX", "(", "Views", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'frame effect as extendedart' refers to cards.frameEffects = 'extendedart'"]}, {"db_id": "codebase_community", "question": "How many negative comments were given by user ID 13?", "evidence": "negative comments refer to Score < 60;", "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "question_toks": ["How", "many", "negative", "comments", "were", "given", "by", "user", "ID", "13", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "comments", "WHERE", "UserId", "=", "13", "AND", "Score", "<", "60"], "evidence_toks": ["negative", "comments", "refer", "to", "Score", "<", "60", ";"], "difficulty": "simple", "templatized_domain_statements": ["'Among black card borders' refers to cards.borderColor = 'black'", "'which card has full artwork' refers to cards.isFullArt = 1"]}, {"db_id": "codebase_community", "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "evidence": "received in 2011 refers to year(Date) = 2011;", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'", "question_toks": ["Provide", "the", "badge", "names", "received", "in", "2011", "for", "the", "user", "whose", "location", "is", "in", "the", "North", "Pole", "."], "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.Date", ")", "=", "'2011", "'", "AND", "T1.Location", "=", "'North", "Pole", "'"], "evidence_toks": ["received", "in", "2011", "refers", "to", "year", "(", "Date", ")", "=", "2011", ";"], "difficulty": "simple", "templatized_domain_statements": ["'set code' refers to sets.code"]}, {"db_id": "codebase_community", "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "evidence": "", "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'", "question_toks": ["Describe", "the", "post", "history", "counts", "and", "last", "edit", "date", "of", "the", "post", "title", "``", "What", "is", "the", "best", "introductory", "Bayesian", "statistics", "textbook", "?", "''"], "SQL_toks": ["SELECT", "T1.Id", ",", "T2.LastEditDate", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'What", "is", "the", "best", "introductory", "Bayesian", "statistics", "textbook", "?", "'"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'code of sets have expansion type of 'expansion'' refers to sets.code WHERE sets.type = 'expansion'"]}, {"db_id": "codebase_community", "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "evidence": "", "SQL": "SELECT T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'", "question_toks": ["Provide", "the", "related", "post", "title", "of", "``", "How", "to", "tell", "if", "something", "happened", "in", "a", "data", "set", "which", "monitors", "a", "value", "over", "time", "''", "."], "SQL_toks": ["SELECT", "T1.RelatedPostId", "FROM", "postLinks", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T1.PostId", "WHERE", "T2.Title", "=", "'How", "to", "tell", "if", "something", "happened", "in", "a", "data", "set", "which", "monitors", "a", "value", "over", "time", "'"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'code of sets have expansion commander type' refers to sets.code WHERE sets.type = 'commander'"]}, {"db_id": "codebase_community", "question": "List the post IDs and badge names of the user Samuel in 2013.", "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;", "SQL": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'", "question_toks": ["List", "the", "post", "IDs", "and", "badge", "names", "of", "the", "user", "Samuel", "in", "2013", "."], "SQL_toks": ["SELECT", "T1.PostId", ",", "T2.Name", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.UserId", "=", "T2.UserId", "WHERE", "T1.UserDisplayName", "=", "'Samuel", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.CreationDate", ")", "=", "'2013", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.Date", ")", "=", "'2013", "'"], "evidence_toks": ["Samuel", "refers", "to", "UserDisplayName", ";", "YEAR", "(", "CreationDate", ")", "=", "2013", "relates", "to", "PostId", ";", "YEAR", "(", "Date", ")", "=", "2013", "relates", "to", "the", "badge", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'cards that are designed by Aaron Miller' refers to cards.artist = 'Aaron Miller'", "'are incredibly powerful' refers to cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomId IS NOT NULL"]}, {"db_id": "codebase_community", "question": "What is the owner's display name of the most popular post?", "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);", "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )", "question_toks": ["What", "is", "the", "owner", "'s", "display", "name", "of", "the", "most", "popular", "post", "?"], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "(", "SELECT", "OwnerUserId", "FROM", "posts", "ORDER", "BY", "ViewCount", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "most", "popular", "post", "refers", "to", "MAX", "(", "ViewCount", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards available in paper' refers to cards.availability LIKE '%paper%'", "'have a positive starting maximum hand size' refers to cards.hAND LIKE '+%' AND cards.hAND != '+0'"]}, {"db_id": "codebase_community", "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';", "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'", "question_toks": ["Mention", "the", "display", "name", "and", "location", "of", "the", "user", "who", "owned", "the", "excerpt", "post", "with", "hypothesis-testing", "tag", "."], "SQL_toks": ["SELECT", "T3.DisplayName", ",", "T3.Location", "FROM", "tags", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.ExcerptPostId", "=", "T2.Id", "INNER", "JOIN", "users", "AS", "T3", "ON", "T3.Id", "=", "T2.OwnerUserId", "WHERE", "T1.TagName", "=", "'hypothesis-testing", "'"], "evidence_toks": ["user", "who", "owned", "the", "excerpt", "post", "with", "hypothesis-testing", "tag", "refers", "to", "OwnerUserId", "WHERE", "TagName", "=", "'hypothesis-testing", "'", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'unconverted mana cost of the card \"Ancestor's Chosen\"' refers to cards.manaCost WHERE name = 'Ancestor`s Chosen'"]}, {"db_id": "codebase_community", "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "evidence": "Title = 'What are principal component scores?';", "SQL": "SELECT T2.RelatedPostId, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?'", "question_toks": ["Write", "down", "the", "related", "posts", "titles", "and", "link", "type", "IDs", "of", "the", "post", "``", "What", "are", "principal", "component", "scores", "?", "``", "."], "SQL_toks": ["SELECT", "T2.RelatedPostId", ",", "T2.LinkTypeId", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "=", "'What", "are", "principal", "component", "scores", "?", "'"], "evidence_toks": ["Title", "=", "'What", "are", "principal", "component", "scores", "?", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'have unknown power' refers to cards.power LIKE '%*%' OR cards.power IS NULL"]}, {"db_id": "codebase_community", "question": "How old is the most influential user?", "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);", "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "question_toks": ["How", "old", "is", "the", "most", "influential", "user", "?"], "SQL_toks": ["SELECT", "Age", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["How", "old", "describes", "age", ";", "the", "most", "influential", "refers", "to", "user", "where", "MAX", "(", "Reputation", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards that are a promotional painting' refers to cards.isPromo = 1", "'cards that have multiple faces on the same card' refers to cards.side IS NOT NULL"]}, {"db_id": "codebase_community", "question": "How many posts with votes that were created in 2011 have a bounty of 50?", "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;", "SQL": "SELECT COUNT(Id) FROM votes WHERE BountyAmount = 50 AND STRFTIME('%Y', CreationDate) = '2011'", "question_toks": ["How", "many", "posts", "with", "votes", "that", "were", "created", "in", "2011", "have", "a", "bounty", "of", "50", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "votes", "WHERE", "BountyAmount", "=", "50", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'"], "evidence_toks": ["created", "in", "2012", "refers", "YEAR", "(", "CreationDate", ")", "=", "2011", ";", "BountyAmount", "=", "50", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards that have the promotional type of \"bundle\"' refers to cards.promoTypes = 'bundle'", "'websites where I can purchase the cards that have the promotional type of \"bundle\"' refers to cards.purchaseUrls"]}, {"db_id": "codebase_community", "question": "What is the title of the post with the oldest post link?", "evidence": "the oldest post link refers to MIN(CreaionDate);", "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1", "question_toks": ["What", "is", "the", "title", "of", "the", "post", "with", "the", "oldest", "post", "link", "?"], "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T2.PostId", "=", "T1.Id", "ORDER", "BY", "T1.CreaionDate", "LIMIT", "1"], "evidence_toks": ["the", "oldest", "post", "link", "refers", "to", "MIN", "(", "CreaionDate", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["\"Serra Angel\" refers to cards.name = 'Serra Angel'", "\"Shrine Keeper\" refers to cards.name = 'Shrine Keeper'", "'card costs more converted mana' refers to ORDER BY cards.convertedManaCost DESC LIMIT 1"]}, {"db_id": "codebase_community", "question": "What is the display name of the user who acquired the highest amount of badges?", "evidence": "highest amount of badges refers to MAX(COUNT(Name));", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "acquired", "the", "highest", "amount", "of", "badges", "?"], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "GROUP", "BY", "T1.DisplayName", "ORDER", "BY", "COUNT", "(", "T1.Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "amount", "of", "badges", "refers", "to", "MAX", "(", "COUNT", "(", "Name", ")", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'card whose promotional name is \"Battra, Dark Destroyer\"' refers to cards.flavorName = 'Battra, Dark Destroyer'"]}, {"db_id": "codebase_community", "question": "When did \"chl\" cast its first vote in a post?", "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);", "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", "question_toks": ["When", "did", "``", "chl", "''", "cast", "its", "first", "vote", "in", "a", "post", "?"], "SQL_toks": ["SELECT", "T2.CreationDate", "FROM", "users", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'chl", "'", "ORDER", "BY", "T2.CreationDate", "LIMIT", "1"], "evidence_toks": ["DisplayName", "=", "'chl", "'", ";", "cast", "its", "first", "vote", "refers", "to", "MIN", "(", "CreationDate", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set of cards with \"Ancestor's Chosen\" is in' refers to set_translations.language = 'Italian'", "'the set of cards with \"Ancestor's Chosen\" is in' refers to cards.name = \"Ancestor's Chosen\""]}, {"db_id": "codebase_community", "question": "What is the display name of the user who acquired the first Archeologist badge?", "evidence": "Archeologist is the name of the badge; acquired the first refers to MIN(Date);", "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Archeologist' ORDER BY T2.Date LIMIT 1", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "acquired", "the", "first", "Archeologist", "badge", "?"], "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.", "`", "Name", "`", "=", "'Archeologist", "'", "ORDER", "BY", "T2.Date", "LIMIT", "1"], "evidence_toks": ["Archeologist", "is", "the", "name", "of", "the", "badge", ";", "acquired", "the", "first", "refers", "to", "MIN", "(", "Date", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set of cards with \"Ancestor's Chosen\" in it' refers to cards.name = \"Ancestor's Chosen\"", "'Korean version' refers to set_translations.language = 'Korean'"]}, {"db_id": "codebase_community", "question": "What is the average number of posts voted by the oldest users?", "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);", "SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )", "question_toks": ["What", "is", "the", "average", "number", "of", "posts", "voted", "by", "the", "oldest", "users", "?"], "SQL_toks": ["SELECT", "AVG", "(", "PostId", ")", "FROM", "votes", "WHERE", "UserId", "IN", "(", "SELECT", "Id", "FROM", "users", "WHERE", "Age", "=", "(", "SELECT", "MAX", "(", "Age", ")", "FROM", "users", ")", ")"], "evidence_toks": ["average", "number", "of", "posts", "voted", "refers", "to", "AVG", "(", "PostId", ")", "FROM", "votes", ";", "the", "oldest", "users", "refer", "to", "MAX", "(", "Age", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["\"Hauptset Zehnte Edition\"' refers to set_translations.translation = 'Hauptset Zehnte Edition'", "'number of cards in the base set of \"Hauptset Zehnte Edition\"' refers to sets.baseSetSize"]}, {"db_id": "codebase_community", "question": "Who has the highest reputation? Please give the display name.", "evidence": "the highest reputation refers to MAX(Reputation);", "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "question_toks": ["Who", "has", "the", "highest", "reputation", "?", "Please", "give", "the", "display", "name", "."], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["the", "highest", "reputation", "refers", "to", "MAX", "(", "Reputation", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the name of the set \"Eighth Edition\"' refers to sets.name = 'Eighth Edition'", "'language' refers to set_translations.language = 'Chinese Simplified'", "'the Simplified Chinese translation of the name' refers to set_translations.translation"]}, {"db_id": "codebase_community", "question": "Please list all display names of users who are adults.", "evidence": "adults refer to users where Age BETWEEN 19 and 65;", "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65", "question_toks": ["Please", "list", "all", "display", "names", "of", "users", "who", "are", "adults", "."], "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["adults", "refer", "to", "users", "where", "Age", "BETWEEN", "19", "and", "65", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online' refers to cards.name = 'Angel of Mercy'", "'appear on Magic: The Gathering Online' refers to sets.mtgoCode IS NOT NULL"]}, {"db_id": "codebase_community", "question": "How many posts did Jay Stevens have in 2010?", "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T1.DisplayName = 'Jay Stevens'", "question_toks": ["How", "many", "posts", "did", "Jay", "Stevens", "have", "in", "2010", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.CreationDate", ")", "=", "'2010", "'", "AND", "T1.DisplayName", "=", "'Jay", "Stevens", "'"], "evidence_toks": ["DisplayName", "=", "'Jay", "Stevens", "'", ";", "in", "2010", "refers", "to", "YEAR", "(", "CreationDate", ")", "=", "2010", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set \"Hauptset Zehnte Edition\"' refers to set_translations.translation = 'Hauptset Zehnte Edition'", "'expansion type' refers to sets.type"]}, {"db_id": "codebase_community", "question": "Which post has the highest score? Please give its id and title's name.", "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;", "SQL": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1", "question_toks": ["Which", "post", "has", "the", "highest", "score", "?", "Please", "give", "its", "id", "and", "title", "'s", "name", "."], "SQL_toks": ["SELECT", "T1.Id", ",", "T2.Title", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "ORDER", "BY", "T2.Score", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";", "owner", "'s", "name", "refers", "to", "DisplayName", ";"], "difficulty": "simple", "templatized_domain_statements": ["'Among the sets in the block \"Ice Age\"' refers to sets.block = 'Ice Age'", "'Italian translation' refers to set_translations.language = 'Italian'"]}, {"db_id": "codebase_community", "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it.", "evidence": "views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets';", "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'", "question_toks": ["Identify", "the", "total", "views", "on", "the", "post", "'Computer", "Game", "Datasets", "'", ".", "Name", "the", "user", "who", "posted", "it", "."], "SQL_toks": ["SELECT", "T2.ViewCount", ",", "T3.DisplayName", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "INNER", "JOIN", "users", "AS", "T3", "ON", "T2.LastEditorUserId", "=", "T3.Id", "WHERE", "T1.Text", "=", "'Computer", "Game", "Datasets", "'"], "evidence_toks": ["views", "refer", "to", "ViewCount", ";", "Name", "the", "user", "refers", "to", "DisplayName", ";", "Text", "=", "'Computer", "Game", "Datasets", "'", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'Among the sets of cards that have an Italian translation' refers to set_translations.language = 'Italian'", "'cards that have an translation' refers to set_translations.translation IS NOT NULL", "'base set number of under 10' refers to sets.baseSetSize < 10"]}, {"db_id": "codebase_community", "question": "Identify the total number of posts with views above average.", "evidence": "views above average refer to ViewCount > AVG(ViewCount);", "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )", "question_toks": ["Identify", "the", "total", "number", "of", "posts", "with", "views", "above", "average", "."], "SQL_toks": ["SELECT", "Id", "FROM", "posts", "WHERE", "ViewCount", ">", "(", "SELECT", "AVG", "(", "ViewCount", ")", "FROM", "posts", ")"], "evidence_toks": ["views", "above", "average", "refer", "to", "ViewCount", ">", "AVG", "(", "ViewCount", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards in the set Coldsnap' refers to sets.name = 'Coldsnap'", "'cards in the set Coldsnap have a black border color' refers to cards.borderColor = 'black'"]}, {"db_id": "codebase_community", "question": "How many comments were added to the post with the highest score?", "evidence": "the highest score refers to MAX(Score);", "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1", "question_toks": ["How", "many", "comments", "were", "added", "to", "the", "post", "with", "the", "highest", "score", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "GROUP", "BY", "T1.Id", "ORDER", "BY", "SUM", "(", "T1.Score", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set Coldsnap' refers to sets.name = 'Coldsnap'", "'card number (100)' refers to cards.number = 100"]}, {"db_id": "codebase_community", "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;", "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0", "question_toks": ["Identify", "the", "number", "of", "posts", "that", "have", "been", "viewed", "over", "35000", "times", "but", "have", "received", "no", "comments", "from", "other", "users", "."], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "posts", "WHERE", "ViewCount", ">", "35000", "AND", "CommentCount", "=", "0"], "evidence_toks": ["have", "been", "viewed", "over", "35000", "times", "refers", "to", "ViewCount", ">", "35000", ";", "received", "no", "comments", "refers", "to", "CommentCount", "=", "0", ";"], "difficulty": "simple", "templatized_domain_statements": ["'German type' refers to foreign_data.language = 'German'", "'German type of the card \"Ancestor's Chosen\"' refers to foreign_data.type where foreign_data.language = 'German' and cards.name = \"Ancestor's Chosen\""]}, {"db_id": "codebase_community", "question": "Identify the latest badge awarded to the user with the display name Emmett.", "evidence": "the latest badge refers to Name FROM badges where MAX(Date);", "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1", "question_toks": ["Identify", "the", "latest", "badge", "awarded", "to", "the", "user", "with", "the", "display", "name", "Emmett", "."], "SQL_toks": ["SELECT", "T1.Name", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Emmett", "'", "ORDER", "BY", "T1.Date", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "latest", "badge", "refers", "to", "Name", "FROM", "badges", "where", "MAX", "(", "Date", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards with a converted mana cost of (100)' refers to cards.convertedManaCost = 100", "'cards set Coldsnap' refers to sets.name = 'Coldsnap'", "'percentage of the cards with a converted mana cost of (100)' refers to CAST(SUM(CASE WHEN cards.convertedManaCost = 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id)"]}, {"db_id": "codebase_community", "question": "Identify the number of adult users who have cast over 5000 upvotes.", "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;", "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000", "question_toks": ["Identify", "the", "number", "of", "adult", "users", "who", "have", "cast", "over", "5000", "upvotes", "."], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65", "AND", "UpVotes", ">", "5000"], "evidence_toks": ["adult", "users", "refer", "to", "Age", "BETWEEN", "19", "and", "65", ";", "over", "5000", "upvotes", "refer", "to", "UpVotes", ">", "5000", ";"], "difficulty": "simple", "templatized_domain_statements": ["'keyrune code' refers to sets.keyruneCode"]}, {"db_id": "codebase_community", "question": "Identify the number of posts and comments left by the user, who has the latest created user account.", "evidence": "the latest created user account refers to MAX(CreationDate);", "SQL": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1", "question_toks": ["Identify", "the", "number", "of", "posts", "and", "comments", "left", "by", "the", "user", ",", "who", "has", "the", "latest", "created", "user", "account", "."], "SQL_toks": ["SELECT", "COUNT", "(", "T2.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "INNER", "JOIN", "comments", "AS", "T3", "ON", "T3.PostId", "=", "T2.Id", "ORDER", "BY", "T1.CreationDate", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "latest", "created", "user", "account", "refers", "to", "MAX", "(", "CreationDate", ")", ";"], "difficulty": "simple", "templatized_domain_statements": ["'magic card market name' refers to sets.mcmName"]}, {"db_id": "codebase_community", "question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "evidence": "the latest comment refers to MAX(CreationDate);", "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1", "question_toks": ["Provide", "the", "text", "of", "the", "latest", "comment", "to", "the", "post", "with", "the", "title", "'Analysing", "wind", "data", "with", "R", "'", "and", "the", "display", "name", "of", "the", "user", "who", "left", "it", "."], "SQL_toks": ["SELECT", "T3.Text", ",", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "INNER", "JOIN", "comments", "AS", "T3", "ON", "T2.Id", "=", "T3.PostId", "WHERE", "T2.Title", "=", "'Analysing", "wind", "data", "with", "R", "'", "ORDER", "BY", "T1.CreationDate", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "latest", "comment", "refers", "to", "MAX", "(", "CreationDate", ")", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'the number of cards' refers to sets.baseSetSize", "'the set of \"Rinascita di Alara\"' refers to set_translations.translation = 'Rinascita di Alara'"]}, {"db_id": "codebase_community", "question": "Count the number of posts with a tag specified as 'careers'.", "evidence": "tag specified as 'careers' refers to TagName = 'careers';", "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'", "question_toks": ["Count", "the", "number", "of", "posts", "with", "a", "tag", "specified", "as", "'careers", "'", "."], "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "tags", "WHERE", "TagName", "=", "'careers", "'"], "evidence_toks": ["tag", "specified", "as", "'careers", "'", "refers", "to", "TagName", "=", "'careers", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set \"Huiti\u00e8me \u00e9dition\"' refers to set_translations.translation = 'Huiti\u00e8me \u00e9dition'", "'expansion type' refers to sets.type"]}, {"db_id": "codebase_community", "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "evidence": "", "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'", "question_toks": ["What", "is", "the", "reputation", "and", "view", "count", "of", "the", "user", ",", "who", "is", "known", "by", "his", "or", "her", "display", "name", "'Jarrod", "Dixon", "'", "?"], "SQL_toks": ["SELECT", "Reputation", ",", "Views", "FROM", "users", "WHERE", "DisplayName", "=", "'Jarrod", "Dixon", "'"], "evidence_toks": [], "difficulty": "simple", "templatized_domain_statements": ["'translations of the name' refers to COUNT(DISTINCT set_translations.translation)", "'many translations' refers to set_translations.translation IS NOT NULL", "'the name of the set \"Salvat 2011\"' refers to sets.name = 'Salvat 2011'"]}, {"db_id": "codebase_community", "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.", "evidence": "The user with higher reputation has more influence; DIVIDE(COUNT(stats_posts.Id where Score > = 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation)) as percentage;", "SQL": "SELECT CAST(SUM(CASE WHEN T2.Score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation", "question_toks": ["Among", "all", "the", "posts", "posted", "by", "the", "most", "influential", "user", ",", "identify", "the", "percentage", "with", "a", "score", "above", "50", "."], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "T2.Score", ">", "=", "50", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T1.Id", ")", "FROM", "users", "T1", "INNER", "JOIN", "posts", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "INNER", "JOIN", "(", "SELECT", "MAX", "(", "Reputation", ")", "AS", "max_reputation", "FROM", "users", ")", "T3", "ON", "T1.Reputation", "=", "T3.max_reputation"], "evidence_toks": ["The", "user", "with", "higher", "reputation", "has", "more", "influence", ";", "DIVIDE", "(", "COUNT", "(", "stats_posts.Id", "where", "Score", ">", "=", "50", "and", "MAX", "(", "Reputation", ")", ")", ")", ",", "COUNT", "(", "stats_posts.Id", "where", "MAX", "(", "Reputation", ")", ")", "as", "percentage", ";"], "difficulty": "challenging", "templatized_domain_statements": ["'release date for the set' refers to sets.releaseDate ", "'the set \"Ola de fr\u00edo\"' refers to set_translations.translation = 'Ola de fr\u00edo'"]}, {"db_id": "codebase_community", "question": "How many posts have a score less than 20?", "evidence": "score less than 20 refers to Score < 20;", "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20", "question_toks": ["How", "many", "posts", "have", "a", "score", "less", "than", "20", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Score", "<", "20"], "evidence_toks": ["score", "less", "than", "20", "refers", "to", "Score", "<", "20", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the expansion type for the set in it' refers to sets.type", "'the set which card \"Samite Pilgrim\" in it' refers to cards.name = 'Samite Pilgrim'"]}, {"db_id": "codebase_community", "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;", "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15", "question_toks": ["Among", "the", "tags", "with", "tag", "ID", "below", "15", ",", "how", "many", "of", "them", "have", "20", "count", "of", "posts", "and", "below", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "tags", "WHERE", "Count", "<", "=", "20", "AND", "Id", "<", "15"], "evidence_toks": ["ID", "below", "15", "refers", "to", "Id", "<", "15", ";", "have", "20", "count", "of", "posts", "and", "below", "refers", "to", "Count", "<", "=", "20", ";"], "difficulty": "simple", "templatized_domain_statements": ["'the set 'World Championship Decks 2004'' refers to sets.name = 'World Championship Decks 2004'"]}, {"db_id": "codebase_community", "question": "Give the texts commented on the post titled \"How can I adapt ANOVA for binary data?\".", "evidence": "Title = 'How can I adapt ANOVA for binary data?';", "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'", "question_toks": ["Give", "the", "texts", "commented", "on", "the", "post", "titled", "``", "How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "``", "."], "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "'"], "evidence_toks": ["Title", "=", "'How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'Simplified Chinese translation' refers to set_translations.language = 'Chinese Simplified'", "'of the name of the set \"Mirrodin\"' refers to sets.name = 'Mirrodin'"]}, {"db_id": "codebase_community", "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?", "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);", "SQL": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1", "question_toks": ["Among", "the", "posts", "with", "views", "ranging", "from", "100", "to", "150", ",", "what", "is", "the", "comment", "with", "the", "highest", "score", "?"], "SQL_toks": ["SELECT", "Text", "FROM", "comments", "WHERE", "PostId", "IN", "(", "SELECT", "Id", "FROM", "posts", "WHERE", "ViewCount", "BETWEEN", "100", "AND", "150", ")", "ORDER", "BY", "Score", "DESC", "LIMIT", "1"], "evidence_toks": ["views", "ranging", "from", "100", "to", "150", "refers", "to", "ViewCount", "BETWEEN", "100", "and", "150", ";", "comment", "with", "the", "highest", "score", "refers", "to", "Text", "where", "MAX", "(", "Score", ")", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'has Japanese translation' refers to set_translations.language = 'Japanese'", "'available in non-foil' refers to sets.isNonFoilOnly = 1", "'percentage of them are only available in non-foil' refers to CAST(SUM(CASE WHEN sets.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(sets.id)"]}, {"db_id": "codebase_community", "question": "List the creation date and age of the user that commented \"@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)\".", "evidence": "Text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! ;-)';", "SQL": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text = '@Jason Punyon in particular gets a humorless downvote for removing my \"verboten\" tag! -)'", "question_toks": ["List", "the", "creation", "date", "and", "age", "of", "the", "user", "that", "commented", "``", "@", "Jason", "Punyon", "in", "particular", "gets", "a", "humorless", "downvote", "for", "removing", "my", "``", "verboten", "''", "tag", "!", ";", "-", ")", "''", "."], "SQL_toks": ["SELECT", "T2.CreationDate", ",", "T2.Age", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.text", "=", "'", "@", "Jason", "Punyon", "in", "particular", "gets", "a", "humorless", "downvote", "for", "removing", "my", "``", "verboten", "''", "tag", "!", "-", ")", "'"], "evidence_toks": ["Text", "=", "'", "@", "Jason", "Punyon", "in", "particular", "gets", "a", "humorless", "downvote", "for", "removing", "my", "``", "verboten", "''", "tag", "!", ";", "-", ")", "'", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'the highest number of cards' refers to ORDER BY sets.baseSetSize DESC LIMIT 1", "'unique id' refers to sets.id"]}, {"db_id": "codebase_community", "question": "In comments with 0 score, how many of the posts have view count lower than 5?", "evidence": "view count lower than 5 refers to ViewCount < 5;", "SQL": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0", "question_toks": ["In", "comments", "with", "0", "score", ",", "how", "many", "of", "the", "posts", "have", "view", "count", "lower", "than", "5", "?"], "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.ViewCount", "<", "5", "AND", "T2.Score", "=", "0"], "evidence_toks": ["view", "count", "lower", "than", "5", "refers", "to", "ViewCount", "<", "5", ";"], "difficulty": "simple", "templatized_domain_statements": ["'rare cards' refers to cards.rarity = 'rare'", "'enchantment cards' refers to cards.types = 'Enchantment'", "'Abundance cards' refers to cards.name = 'Abundance'", "'play format status are all legal' refers to legalities.status = 'Legal'"]}, {"db_id": "codebase_community", "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "evidence": "Title = 'Group differences on a five point Likert item';", "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'", "question_toks": ["What", "is", "the", "post", "ID", "and", "the", "comments", "commented", "in", "the", "post", "titled", "by", "``", "Group", "differences", "on", "a", "five", "point", "Likert", "item", "''", "?"], "SQL_toks": ["SELECT", "T2.Id", ",", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'Group", "differences", "on", "a", "five", "point", "Likert", "item", "'"], "evidence_toks": ["Title", "=", "'Group", "differences", "on", "a", "five", "point", "Likert", "item", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'play format' refers to legalities.format", "'banned status' refers to legalities.status = 'Banned'", "'play format has the highest number of banned status' refers to ORDER BY COUNT(legalities.status) DESC LIMIT 1"]}, {"db_id": "codebase_community", "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;", "SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'", "question_toks": ["What", "is", "the", "up", "vote", "number", "of", "the", "user", "that", "commented", "``", "R", "is", "also", "lazy", "evaluated", ".", "``", "?"], "SQL_toks": ["SELECT", "T2.UpVotes", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Text", "=", "'", "R", "is", "also", "lazy", "evaluated", ".", "'"], "evidence_toks": ["commented", "``", "R", "is", "also", "lazy", "evaluated", ".", "''", "refers", "to", "Text", "of", "the", "comment", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards whose version of frame style is (100)' refers to cards.frameVersion = '100'", "'card illustrated by D. Alexander Gregory' refers to cards.artist = 'D. Alexander Gregory'", "'illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast' refers to T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy' AND T1.hasContentWarning = 1", "'legacy play format' refers to legalities.format = 'legacy'", "'status of the card' refers to legalities.status"]}, {"db_id": "codebase_community", "question": "List the comments commented by the user with a username of \"Random\".", "evidence": "comments refer to Text; username of \"Random\" refers to DisplayName = 'Random';", "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Random'", "question_toks": ["List", "the", "comments", "commented", "by", "the", "user", "with", "a", "username", "of", "``", "Random", "''", "."], "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Random", "'"], "evidence_toks": ["comments", "refer", "to", "Text", ";", "username", "of", "``", "Random", "''", "refers", "to", "DisplayName", "=", "'Random", "'", ";"], "difficulty": "simple", "templatized_domain_statements": ["'cards ranked 1st on EDHRec' refers to cards.edhrecRank = 1", "'its banned play format' refers to legalities.status = 'Banned'", "'play format' refers to legalities.format", "'cards name' refers to cards.name"]}, {"db_id": "codebase_community", "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?", "evidence": "DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10)), (COUNT(UserId where Score BETWEEN 5 and 10)) as percentage;", "SQL": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) / COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10", "question_toks": ["Among", "the", "comments", "with", "scores", "between", "5", "to", "10", ",", "what", "is", "the", "percentage", "of", "the", "users", "with", "0", "up", "votes", "?"], "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "T1.UpVotes", "=", "0", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "/", "COUNT", "(", "T1.Id", ")", "AS", "per", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Score", "BETWEEN", "5", "AND", "10"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "UserId", "where", "UpVotes", "=", "0", "and", "Score", "BETWEEN", "5", "and", "10", ")", ")", ",", "(", "COUNT", "(", "UserId", "where", "Score", "BETWEEN", "5", "and", "10", ")", ")", "as", "percentage", ";"], "difficulty": "moderate", "templatized_domain_statements": ["'card designed by Matthew D. Wilson' refers to cards.artist = 'Matthew D. Wilson'", "'available only in the paper' refers to cards.availability = 'paper'"]}]